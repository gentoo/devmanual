<?xml version="1.0"?>
<guide self="ebuild-maintenance/general/">
<chapter>
<title>Maintaining Your Package</title>

<section>
<title>General responsibilities</title>
<body>

<note>
Gentoo's Quality Assurance (QA) team also maintains a
<uri link="https://projects.gentoo.org/qa/policy-guide/">policy guide</uri>,
which contains useful advice on ebuild structure and behaviour.
</note>
  
<p>
You should always use the latest <uri link="::ebuild-writing/eapi/">EAPI</uri>.

The main exception is for critical packages like Portage or
those typically maintained by base-system which normally wait
~2-3 years.

Note that for new EAPIs, we require 1 year before using them in
stable ebuilds.

Another common exception is when an eclass you consume does not yet support it.
You should file a bug or otherwise contact the eclass maintainer to enquire
about its status with respect to the new EAPI.

<e>Rationale: Newer EAPIs add improvements which are often user-visible,
e.g. EAPI 6's eapply_user and EAPI 7's improved cross-compile support.</e>
</p>

<p>
Check regularly for new bugs on
<uri link="https://bugs.gentoo.org/">bugs.gentoo.org</uri>.
</p>

<p>
Keep an eye out for CI/tinderbox style bugs too, which are found by testing the
latest ebuilds (by commit) and random packages, respectively.
</p>

<p>
Address CI warnings for your packages. These are generated by pkgcheck.
You can run <c>pkgcheck scan</c> on your packages to detect most of these,
but some only become visible when running the scans on the whole tree
(e.g. broken dependency graph).

Please note that repoman, while advisable to use, detects different
(mostly a subset, with one or two exceptions) issues from what pkgcheck can.
Given pkgcheck powers Gentoo's CI, it is wise to make use of pkgcheck.

You can view the current full CI report
<uri link="https://qa-reports.gentoo.org/output/gentoo-ci/output.html">
here</uri>.

The CI bot should automatically email you if you are responsible for new
warnings.

Ask a fellow developer if you're unsure of the meaning or how to fix a warning.
If in doubt about who to ask, head to the #gentoo-dev, #gentoo-qa, or
#gentoo-dev-help (for non-developers too) IRC channels.
</p>

<p>
Most Gentoo developers tend to agree that pkgcheck in its own serves the QA needs
of Gentoo. Indeed, the Gentoo repository itself uses only pkgcheck for its CI.
However, it is important to note that the older, venerable repoman is still used
and respected by many Gentoo developers. It is an area for future research to
determine which checks are included/missing from one or the other tool <d/> in
the meantime, it is safest to use both (and honestly, it doesn't really take
that long).
</p>

<p>
If your package has stable keywords, you <b>must</b> request stabilisation of a
newer version within a reasonable timeframe (usually at least 30 days, but
see the
<uri link="::keywording/#Moving from ~arch to arch">stabilization section</uri>),
provided there are no regressions compared to the last stable version.

Conveniently, <uri link="https://packages.gentoo.org/">packages.gentoo.org</uri>
has a per-maintainer report which lists packages which are now
eligible for stabilisation based on time on the repository. Find this by looking
at the "Maintainers" tab and clicking your name, then "Stabilization".

<e>Rationale: This prevents stable users from being stuck on old versions of the
package with no justification.</e>
</p>

<p>
Keep up with changes regarding 'declaration of support variables',
e.g.<c>PYTHON_COMPAT</c> and <c>USE_RUBY</c>. Do <b>not</b> wait until a bug is
filed for your package, be proactive and look out for prompts on the gentoo-dev
mailing list.

You may need to wait until your package's dependencies support newer
versions of e.g. Python first, so file a bug or speak to the package
maintainer in such a case.

<e>Rationale: It's important to add the latest
e.g. Python versions which your package is compatible with as soon as possible
to avoid conflicts for users when the default Python target in the Gentoo
profiles change.</e>
</p>

</body>
</section>
</chapter>
</guide>
