<?xml version="1.0"?>
<guide self="ebuild-maintenance/general/">
<chapter>
<title>Maintainer's checklist</title>

<section>
<title>Your responsibilities</title>
<body>

<p>
This page aids you in getting familiar with the "everyday" tasks and
responsibilites of a package maintainer in Gentoo. You may find this page
useful if you're curious about stepping up as a maintainer, returning from a
long hiatus, or simply looking for tips.

Not everything listed in here need to be incorporated to your workflow, but
following these steps should keep the Gentoo repository in a clean working
state, keep your activity up, and ease your tasks as a maintainer.
</p>

<p>
Your general responsibilities as a maintainer consist of: keeping your packages
up-to-date with upstream releases, responding to and fixing bugs assigned to
you, and handling possible stabilization of your packages in time. You also
need to keep up with the Python, Ruby, PHP, etc. ecosystems in Gentoo.
</p>

<p>
<e>Rationale: If your package has existing stable keywords you <b>must</b>
request stabilization of a newer version within a reasonable timeframe (usually
at least 30 days, but see the
<uri link="::keywording/#Moving from ~arch to arch">stabilization section
</uri>), provided there are no regressions compared to the last stable version.
This prevents stable users from being stuck on old versions of the package with
no justification.</e>
</p>

<p>
<e>Rationale: It's also important to add the latest e.g. Python versions which
your package supports as soon as possible to avoid conflicts for users when the
default Python target in the Gentoo profiles changes.</e> See
<uri link="::ebuild-maintenance/general/#Daily / Occassional pkgcheck scans"/>
for a tip to quickly check for a PYTHON_COMPAT update in your packages.
</p>

<p>
If you're looking for tips on how to be aware of tasks available to you as a
maintainer, please see the
<uri link="::ebuild-maintenance/general/#External tools"/> section below.
</p>

</body>

<subsection>
<title>Bugzilla</title>
<body>

<p>
<uri link="https://bugs.gentoo.org/">Gentoo's Bugzilla</uri> is still the main
communication channel to reach you with your package state. When a bug report
gets assigned to you, the first thing you should attempt to do is to confirm
and replicate it with the information attached to the bug. You should then
either mark the bug as "CONFIRMED", or provide a comment that you can't.
</p>

<p>
Keep an eye out for CI/tinderbox-style bugs too, which are found by testing the
latest ebuilds (by commit) and random packages, respectively. They reveal
breakages on different systems, mostly missing dependencies, and make you face
issues you perhaps hadn't thought of before.
</p>

<p>
When you make a commit to Gentoo's git tree, please remember to reference or
close a single bug, or multiple bugs, by using <e>Bug:</e> or <e>Closes:</e>tag
in your git commit message's footer area.
<uri link="::ebuild-maintenance/git/#Git commit message format">See an example,
and more documentation</uri>.
</p>

<p>
<uri link="::keywording/#Stabilization rules">Stabilization can be
done by a maintainer who is also a developer, and owns relevant hardware</uri>.
It can also be <uri link="::keywording/#Moving from ~arch to arch">
requested through Bugzilla</uri> for arch teams to handle, even for your own
packages.
</p>

<p>
It is recommended to set up your mail client's filtering properly. Separating
Bugzilla mail from generic alias mail, mailing lists, GitHub etc, helps to
organize your workflow and time usage.
</p>

<p>
A simple alias separation, for example, is done by simple filters:
</p>

<pre>
# example project, Bugzilla mail
To-contains: example@gentoo.org
From-is: bugzilla-daemon@gentoo.org

# example project, alias mail
To-contains: example@gentoo.org
From-isn't: bugzilla-daemon@gentoo.org
</pre>

<p>
And separate your personal Bugzilla mail such as:
</p>

<pre>
# Personal Bugzilla mail
To-is: developer@gentoo.org
From-is: bugzilla-daemon@gentoo.org
</pre>

<p>
You can separate mailing list e-mails similarly, etc. See
<uri link="https://wiki.gentoo.org/wiki/Project:Infrastructure/Developer_E-Mail/Sieve_Example">
Project:Infrastructure/Developer_E-Mail/Sieve_Example</uri> from wiki for an
example.
</p>

<p>
Any GitHub pull requests linked to your bugs are shown in the "See also" field.
See the <uri link="::ebuild-maintenance/general/#GitHub pull requests"/>
section below.
</p>

<p>
Check bugs assigned to you by searching <c>assignee:developer@gentoo.org</c>.
You can also see them in <uri link="https://bugs.gentoo.org/">Bugzilla's front
page</uri> after logging in, "Open bugs assigned to me". And also in
<uri link="::ebuild-maintenance/general/#Package updates, and bugs">
packages.gentoo.org's maintainer page </uri>.
</p>

</body>
</subsection>

<subsection>
<title>Ebuilds &amp; git workflow</title>
<body>

<p>
See <uri link="::ebuild-maintenance/git">Git for Gentoo Developers</uri> for
configuration help.
</p>

<p>
When writing and pushing ebuilds to Gentoo's repository tree (and why not to
any overlay as well) you should definitely take advantage of available QA
tools. <c>pkgcheck</c> and <c>repoman</c> being your choices here. They can
both be found and installed from the main Gentoo repository with their
respective names.
</p>

<p>
Make sure you don't blindly copy-paste an old ebuild and try to push that.
Always take a look and try to spot the obvious outdated parts <d/> such as old
EAPI, <uri link="::ebuild-writing/error-handling/#The die Function">unguarded
external tool calls</uri>, new Python compatibility update,
<uri link="::ebuild-writing/common-mistakes">etc</uri>.
</p>

<note>
EAPI availability is usually dictated by the state of eclasses being used.
</note>

<p>
After you've edited an ebuild or metadata.xml file, run <c>pkgcheck scan</c>
and/or <c>repoman -x full</c> in the package directory.
</p>

<p>
<c>pkgcheck</c> and <c>repoman</c> won't catch every issue. So watch out for
<uri link="::ebuild-writing/common-mistakes"/> when writing ebuilds. In
general, familiarize yourself with the Quality Assurance's
<uri link="https://projects.gentoo.org/qa/policy-guide/">Policy guide</uri> and
if writing Python ebuilds, the Python project's
<uri link="https://dev.gentoo.org/~mgorny/python-guide/">Python guide</uri>.
</p>

<p>
When committing your changes, <c>repoman commit</c> or <c>pkgdev commit</c>
(from the <c>dev-util/pkgdev</c> package) can be used. They will properly
sign-off the commits with accordance to Gentoo's
<uri link="https://www.gentoo.org/glep/glep-0076.html#certificate-of-origin">
GLEP 76 requirements</uri>. These tools will also append the correct, GLEP 66
compliant <uri link="::ebuild-maintenance/git/#Git commit message format">
summary</uri> and fix Manifest or wrong copyright headers automatically.

Commits also need to be PGP-signed, so keep your keys
<uri link="https://wiki.gentoo.org/wiki/Project:Infrastructure/Generating_GLEP_63_based_OpenPGP_keys#Invalid_expiration_date">
up-to-date</uri> and
<uri link="https://wiki.gentoo.org/wiki/Project:Infrastructure/Generating_GLEP_63_based_OpenPGP_keys#Submit_your_new_key_to_the_keyserver">
available</uri> in Gentoo's infra.
</p>

<p>
After committing, use <c>pkgcheck scan --commits</c> for a final check before
issuing <c>git pull &amp;&amp; git push</c> or <c>git pull &amp;&amp; pkgdev
push</c>. Of course, <c>git log -p</c> before pushing doesn't hurt either. <c>
git status</c> will help you check that you don't have any modified, uncommited
work (like a .patch file) before pushing.
<uri link="https://blogs.gentoo.org/mgorny/2019/12/12/a-better-ebuild-workflow-with-pure-git-and-pkgcheck/">
"A better ebuild workflow with pure git and pkgcheck"</uri> guide if you're not
too familiar with git.
</p>

<p>
Gentoo's
<uri link="https://qa-reports.gentoo.org/output/gentoo-ci/output.html">CI
system </uri> runs pkgcheck, so familiarizing yourself with pkgcheck and its
warnings is encouraged. If you add a new warning to the tree, you will get an
e-mail from "repomirrorci@g.o" with the warning, and this could most likely
have been prevented by running <c>pkgcheck scan --commits</c> before pushing
your changes. A new CI error will prevent metadata being generated to Gentoo's
sync-repositories, and therefore deny users the latest updates until the CI
error is fixed.
</p>

<p>
By default <c>pkgcheck</c> enables a lot of checks. Some of them are more
useful than the others. Pkgcheck can be configured via the <c>
~/.config/pkgcheck/pkgcheck.conf</c> file. For example, a sane configuration
could look like this:
</p>

<pre>
# ~/.config/pkgcheck/pkgcheck.conf
#
# -ImlateCheck = PotentialStable, all of these checks are just noise.
[DEFAULT]
checks = -ImlateCheck,-RedundantVersionCheck,-UnstableOnlyCheck
</pre>

<p>
Refer to the <uri link="https://pkgcore.GitHub.io/pkgcheck/man/pkgcheck.html">
official documentation</uri> of the flags and edit to your needs.

You can also just enable the checks you wish from the command line, e.g., <c>
pkgcheck scan -c StableRequestCheck</c>. More on that below.
</p>

<p>
Ask a fellow developer if you're unsure of the meaning or how to fix a warning.
If in doubt about who to ask, head to the #gentoo-dev, #gentoo-qa, or
#gentoo-dev-help (for non-developers too) IRC channels. You can, and you
should, of course ask before pushing if something is not fully clear to you.
</p>

</body>

<subsubsection>
<title>GitHub pull requests</title>
<body>

<p>
You may find yourself in a position where users provide contributions to your
packages via GitHub pull requests. As GitHub is a popular platform, Gentoo is
seeing many contributions pushed there. That being said, using GitHub is not
mandatory and Bugzilla is still the main channel for reporting enhancements to
your packages.
</p>

<p>
<b>Joining the Gentoo GitHub organization:</b> To join the Gentoo GitHub
organization, make sure you've set your <c>gentooGitHubUser</c> attribute in
<uri link="https://wiki.gentoo.org/wiki/Project:Infrastructure/LDAP_Guide#Optional_custom_attributes">
dev.gentoo.org's LDAP record</uri>. Join <c>#gentoo-infra</c> on the Libera IRC
network to ask for a manual re-sync, and you will be added to the Gentoo
organization in GitHub. You should be automatically added to teams you're part
of. Remember to once again update your mail filters so you can organize
incoming mail from GitHub better.
</p>

<p>
<b>The CI check in GitHub:</b> GitHub pull requests feature a powerful CI check
to ensure the commits won't break repository's integrity. As said, a new CI
error will prevent metadata being generated thus denying users the latest
updates, until the CI error is fixed. Every pull request gets tested, and
you'll see <b>@gentoo-repo-qa-bot </b> commenting whether the pull requests
passes or fails the CI check with a <e>Pull request CI report</e> comment.
Pay attention to this report, as it shows very clearly where and why the PR
fails, if it fails. You can utilize this CI check even for your own commits if
you're afraid it's going to break something <d/> e.g. when doing <c>profile/
</c> updates. Just open a
<uri link="https://wiki.gentoo.org/wiki/Gentoo_GitHub#How_to_make_a_pull_request">
pull request of your own</uri> against our
<uri link="https://github.com/gentoo/gentoo">gentoo/gentoo GitHub mirror</uri>.
</p>

<p>
<b>Reviewing pull requests:</b>
GitHub's Web UI provides an easy interface to review individual commits, or all
changes at once. Make sure you thoroughly read through all parts of the
contribution and hold it to the same standards as your own work, i.e., latest
EAPI, updated Python compatibility, missing <c>|| dies</c> etc. And again, <c>
pkgcheck</c> and <c>repoman</c> don't catch everything a human does (and vice
versa).
</p>

<p>
Alternatively,
<uri link="https://packages.gentoo.org/packages/dev-util/github-cli">
dev-util/github-cli</uri> can be used to work with pull requests.
</p>

<p>
<b>Testing pull requests:</b>
All contributions should be tested. Even though the ebuild looks fine, you
might face unpredictable issues, like changed SRC_URI, missing DEPEND, etc.

You can easily and quickly do the basic testing by merging it to your own local
repository, then running <c>emerge</c> against affected package(s). More
thorough testing can be done via different chroots, containers, and virtual
machines, but setting them up for a one-time run might be a bit much.
<uri link="https://packages.gentoo.org/packages/dev-util/ebuildtester">
dev-util/ebuildtester</uri> is a great tool for situations like that. For
continuous involvment with GitHub contributions, it's recommended to set up a
more <uri link="https://wiki.gentoo.org/wiki/Test_environment">permanent test
environment</uri> See also
<uri link="https://wiki.gentoo.org/wiki/Package_testing">Package testing</uri>.
</p>

<p>
<b>Merging pull requests:</b>
Since the <uri link="https://github.com/gentoo/gentoo">gentoo/gentoo GitHub
repository</uri> is just a mirror, we can't actually merge these <b>in</b>
GitHub. So we merge the raw .patch files to our own <c>git.gentoo.org</c>
repository.

<c>curl | git -am</c> can be used, but there are also tools to help you merge
GitHub pull requests, and/or Bugzilla .patch files. See
<uri link="https://packages.gentoo.org/packages/app-portage/pram">
app-portage/pram </uri> and
<uri link="https://packages.gentoo.org/packages/dev-perl/Gentoo-App-Pram">
dev-perl/Gentoo-App-Pram</uri> for more information. At this point you can also
fix any misformed commit summaries, messages etc. that don't adhere to
Gentoo's GLEPS <uri link="https://www.gentoo.org/glep/glep-0066.html">66</uri>
and <uri link="https://www.gentoo.org/glep/glep-0076.html">76</uri>
requirements. If the author has added their sign-off to their contribution, per
GLEP-76 you <b>can not</b> modify their copyrighted work. So do your additional
fixes and updates in a separate commit. Make sure to review the contribution so
you're not pushing broken ebuilds and fixing them afterwards, since it's also
a learning experience for the contributor.
</p>

</body>
</subsubsection>

</subsection>
</section>

<section>
<title>External tools</title>
<body>

<p>
If you are in doubt whether there is "anything for you to do" with your
packages, use these external tools / resources to check state of your packages.
</p>

</body>

<subsection>
<title>Package updates, and bugs</title>
<body>

<p>
<uri link="https://packages.gentoo.org/">packages.gentoo.org</uri> provides a
<uri link="https://repology.org/">Repology</uri> integration, which shows which
of your packages  don't have the latest versions available in Gentoo's package
repository. You can find it under the "Outdated" tab of your maintainer page,
<c>https://packages.gentoo.org/maintainer/developer@gentoo.org</c>. You can
also find open bugs assigned to you from this page behind the "Bugs" tab.
</p>

<p>
<uri link="https://repology.org/">Repology</uri> itself provides an RSS feed to
follow per maintainer, so if you search for "Maintainer: developer@gentoo.org",
and get to <c>https://repology.org/maintainer/developer%40gentoo.org</c> page,
you can find HTML and RSS feeds on the rightmost pane. These will announce when
a package maintained by you gets a new version flagged in Repology.
</p>

<note>
If the package is unique to Gentoo, Repology obviously can't know about updates
happening outside Gentoo.
</note>

</body>
</subsection>

<subsection>
<title>CI issues with your packages</title>
<body>

<p>
Our <uri link="https://qa-reports.gentoo.org/">QA reports</uri> page reports
all currently available CI issues within the main repository. You can filter
this CI report page by appending <c>;maintainer=my@e.mail</c> matching the
address listed in <b>metadata.xml</b> file. For example, <c>
https://qa-reports.gentoo.org/output/gentoo-ci/output.html;maintainer=developer@gentoo.org
</c> would show all CI issues for packages assigned to developer@gentoo.org.
This works with projects and proxied maintainers alike.
</p>

<note>
For Gentoo developers, the developer tag is enough, i.e.,<c>
;maintainer=developer</c>
</note>

</body>
</subsection>

<subsection>
<title>Daily / Occassional pkgcheck scans</title>
<body>

<p>
<c>pkgcheck</c> provides a tool to quickly check the overall state of your
packages. To check for pending stabilizations, you can use something like:
<c>git grep -l developer@gentoo.org '**/metadata.xml' | cut -d/ -f1-2 | xargs
pkgcheck --color true scan -c StableRequestCheck</c>
in the root of the git tree.
</p>

<p>
To see packages with identical KEYWORDS, which means you can clean some older
versions from the tree, use: <c>git grep -l developer@gentoo.org
'**/metadata.xml' | cut -d/ -f1-2 | xargs pkgcheck --color true scan -c
RedundantVersionCheck</c>
</p>

<p>
and finally, to combine these checks, you can do:
<c>git grep -l developer@gentoo.org '**/metadata.xml' | cut -d/ -f1-2 | xargs
pkgcheck --color true scan -c RedundantVersionCheck,StableRequestCheck</c>
</p>

<p>
These two above checks are also shown in your maintainer page on <uri
link="https://packages.gentoo.org/">packages.gentoo.org</uri>.
</p>

<p>
Finally, check available <e>PYTHON_COMPAT</e> updates to your packages with:

<c>git grep -l developer@gentoo.org '**/metadata.xml' | cut -d/ -f1-2 | xargs
pkgcheck --color true scan -k PythonCompatUpdate</c>
</p>

</body>
</subsection>
</section>

</chapter>
</guide>

