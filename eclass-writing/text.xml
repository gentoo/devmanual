<?xml version="1.0"?>
<guide self="eclass-writing/">
<chapter>
<title>Eclass Writing Guide</title>

<body>
<p>
This section provides a brief introduction to eclass authoring.
</p>

<important>
You should reread the <uri link="::general-concepts/overlay#Overlay and Eclasses"/>
and <uri link="::general-concepts/portage-cache"/> sections before continuing.
</important>

<section>
<title>Purpose of Eclasses</title>
<body>

<p>
An eclass is a collection of code which can be used by more than one ebuild. At
the time of writing, all eclasses live in the <c>eclass/</c> directory in the tree.
Roughly speaking, there are three kinds of eclass:
</p>

<ul>
  <li>
    Those which provide common functions which are used by many ebuilds (for
    example, <c>eutils</c>, <c>eapi7-ver</c>, <c>cvs</c>, <c>bash-completion</c>)
  </li>
  <li>
    Those which provide a basic build system for many similar packages (for
    example, <c>vim-plugin</c>, <c>kde</c>)
  </li>
  <li>
    Those which handle one or a small number of packages with complex build
    systems (for example, <c>vim</c>, <c>toolchain</c>, <c>kernel-2</c>)
  </li>
</ul>

</body>
</section>

<section>
<title>Adding and Updating Eclasses</title>
<body>

<p>
Before committing a new eclass to the tree, it should be emailed to the
gentoo-dev mailing list with a justification and a proposed implementation. Do
not skip this step <d/> sometimes a better implementation or an alternative which
does not require a new eclass will be suggested.
</p>

<p>
Before updating any eclass, email patches to the gentoo-dev list. It may be that
your proposed change is broken in a way you had not anticipated, or that there
is an existing function which performs the same purpose, or that your function
may be better off in its own eclass. If you don't email gentoo-dev first,
and end up breaking something, expect to be in a lot of trouble.
</p>

<p>
The exceptions to this rule are per-package eclasses. For example,
the <c>apache-2</c> eclass is only used by the <c>www-servers/apache</c>
package, and thus does not typically require changes to be emailed for review.
</p>

<p>
When removing a function or changing the API of an eclass, make sure that
it doesn't break any ebuilds in the Gentoo repository.
</p>

<p>
If there is an existing maintainer for an eclass (this is usually the case), you
<b>must</b> talk to the maintainer before committing any changes.
</p>

<warning>
Committing a broken eclass can kill huge numbers of packages. Since
<c>repoman</c> is not eclass-aware, be very sure you do proper testing.
</warning>

<p>
A simple way to verify syntax is <c>bash -n foo.eclass</c>.
</p>

</body>
</section>

<section>
<title>Removing Eclasses</title>
<body>

<p>No longer used eclasses may be removed from the tree, but developers must
adhere to the following process:</p>

<ol>
  <li>
    Make sure that no packages or other eclasses in the tree <c>inherit</c> the
    eclass.
  </li>
  <li>
    Send a lastrite message to the gentoo-dev and gentoo-dev-announce
    mailing-lists, announcing that the not-used eclass will be removed in 30
    days.
  </li>
  <li>
    Add a one line comment to the eclass, saying exactly <c># @DEAD</c> so that
    the eclass-manpages package will not attempt to document it.
  </li>
  <li>
    Wait for the 30-day period to pass, then remove the eclass from the tree.
  </li>
</ol>


</body>
</section>

<section>
<title>Documenting Eclasses</title>
<body>

<p>
Eclasses are documented with comment blocks that follow a special
markup syntax. The comment blocks are separated by blank lines and
each block documents an individual element of an eclass.
</p>

<p>
Documentation tags for various eclass elements are explained in their
respective sections below. Common to all the tags that accept
multiline freetext, the <c>@CODE</c> tag should be used when necessary
to create unformatted code chunks (such as example code) by placing
the tag at the beginning and the end.
</p>
</body>
</section>

<section>
<title>Basic Eclass Format</title>
<body>

<p>
An eclass is a <c>bash</c> script which is sourced within the ebuild environment.
Files should be a simple text file with a <c>.eclass</c> extension. Allowed
characters in the filename are lowercase letters, the digits 0-9, hyphens,
underscores and dots. Eclasses are not intrinsically versioned.
</p>

<p>
Eclasses should start with the standard ebuild header, along with
comments explaining the maintainer and purpose of the eclass, and any
other relevant documentation. Eclass documentation block should be the
first documentation block to appear in the eclass. The following table
summarizes the available documentation tags:
</p>

<table>
<tr>
  <th>tag</th>
  <th>optional?</th>
  <th>arguments</th>
  <th>description</th>
</tr>
<tr>
  <ti>
    <c>@ECLASS:</c>
  </ti>
  <ti>
    NO
  </ti>
  <ti>
    Name of the eclass being documented.
  </ti>
  <ti>
    Documents various information about the eclass. Must appear as the
    first tag in the comment block.
  </ti>
</tr>
<tr>
  <ti>
    <c>@MAINTAINER:</c>
  </ti>
  <ti>
    NO
  </ti>
  <ti>
    One or more name and email pairs.
  </ti>
  <ti>
    List of maintainers for the eclass to be contacted. One line per
    maintainer. Must start on a newline after the tag.
  </ti>
</tr>
<tr>
  <ti>
    <c>@AUTHOR:</c>
  </ti>
  <ti>
    YES
  </ti>
  <ti>
    One or more name and email pairs.
  </ti>
  <ti>
    List of authors for the eclass. One line per author. Must start on
    a newline after the tag.
  </ti>
</tr>
<tr>
  <ti>
    <c>@BUGREPORTS:</c>
  </ti>
  <ti>
    YES
  </ti>
  <ti>
    Multiline freetext.
  </ti>
  <ti>
    Describes how bugs related to this eclass should be reported.
  </ti>
</tr>
<tr>
  <ti>
    <c>@VCSURL:</c>
  </ti>
  <ti>
    YES
  </ti>
  <ti>
    A URI string.
  </ti>
  <ti>
    Points to the URL of the VCS that contains the eclass source.
  </ti>
</tr>
<tr>
  <ti>
    <c>@BLURB:</c>
  </ti>
  <ti>
    NO
  </ti>
  <ti>
    Single line freetext.
  </ti>
  <ti>
    Contains a short description for the eclass. Must be on the same
    line with the tag.
  </ti>
</tr>
<tr>
  <ti>
    <c>@DESCRIPTION:</c>
  </ti>
  <ti>
    YES
  </ti>
  <ti>
    Multiline freetext.
  </ti>
  <ti>
    Long description for the eclass.
  </ti>
</tr>
<tr>
  <ti>
    <c>@EXAMPLE:</c>
  </ti>
  <ti>
    YES
  </ti>
  <ti>
    Multiline freetext.
  </ti>
  <ti>
    Examples that illustrate various uses of this eclass.
  </ti>
</tr>
</table>

</body>
</section>

<section>
<title>Eclass Variables</title>
<body>

<p>
Top level variables may be defined as for ebuilds. If any USE flags are
used, <c>IUSE</c> must be set. The <c>KEYWORDS</c> variable must <b>not</b> be set in an
eclass.
</p>

<p>
You should document the meaning, usage, and default value of every
variable in your eclass. The tags available for documenting eclass
variables are as follows:
</p>

<table>
<tr>
  <th>tag</th>
  <th>optional?</th>
  <th>arguments</th>
  <th>description</th>
</tr>
<tr>
  <ti nowrap="nowrap">
    <c>@ECLASS-VARIABLE:</c>
  </ti>
  <ti>
    NO
  </ti>
  <ti>
    Name of the eclass variable to which the documentation applies.
  </ti>
  <ti>
    This tag applies to eclass specific variables that affect the
    default behavior of the eclass. Read-only variables, which are
    exported by the eclass for developer use, are also documented with
    this tag. Must appear as the first tag in the comment block.
  </ti>
</tr>
<tr>
  <ti>
    <c>@DEFAULT_UNSET</c>
  </ti>
  <ti>
    YES
  </ti>
  <ti>
    <d/>
  </ti>
  <ti>
    Indicates that this variable is unset by default if not set by the
    developer.
  </ti>
</tr>
<tr>
  <ti>
    <c>@INTERNAL</c>
  </ti>
  <ti>
    YES
  </ti>
  <ti>
    <d/>
  </ti>
  <ti>
    Indicates that the variable is internal to the eclass.
  </ti>
</tr>
<tr>
  <ti>
    <c>@REQUIRED</c>
  </ti>
  <ti>
    YES
  </ti>
  <ti>
    <d/>
  </ti>
  <ti>
    Indicates that this variable must be set by the developer.
  </ti>
</tr>
<tr>
  <ti>
    <c>@DESCRIPTION:</c>
  </ti>
  <ti>
    NO
  </ti>
  <ti>
    Multiline freetext.
  </ti>
  <ti>
    Long description for the eclass variable.
  </ti>
</tr>
</table>

</body>
</section>

<section>
<title>Eclass Functions</title>
<body>

<p>
Eclasses may define functions. These functions will be visible to anything which
inherits the eclass.
</p>

<p>
You should document the purpose, arguments, usage, and return value of
every function in your eclass. The standard tags available for
documentation are:
</p>

<table>
<tr>
  <th>tag</th>
  <th>optional?</th>
  <th>arguments</th>
  <th>description</th>
</tr>
<tr>
  <ti>
    <c>@FUNCTION:</c>
  </ti>
  <ti>
    NO
  </ti>
  <ti>
    Name of the function to which the documentation block applies.
  </ti>
  <ti>
    Documents information about an eclass function such as its calling
    convention etc. Must appear as the first tag in the comment block.
  </ti>
</tr>
<tr>
  <ti>
    <c>@USAGE:</c>
  </ti>
  <ti>
    NO
  </ti>
  <ti>
    List of required and optional arguments to the function.
  </ti>
  <ti>
    List of arguments that the eclass function accepts, specified in
    the following syntax: <c>&lt;</c>Required arguments<c>&gt;</c>
    <c>[</c>Optional arguments<c>]</c>
  </ti>
</tr>
<tr>
  <ti>
    <c>@RETURN:</c>
  </ti>
  <ti>
    <b>*</b>
  </ti>
  <ti>
    Return value of the function.
  </ti>
  <ti>
    <p>Description for the value returned by the function.</p>
    <p><b>*</b>: Not optional for functions that return a value.</p>
  </ti>
</tr>
<tr>
  <ti>
    <c>@MAINTAINER:</c>
  </ti>
  <ti>
    YES
  </ti>
  <ti>
    Multiline freetext.
  </ti>
  <ti>
    List of contacts for the eclass function. One line per
    maintainer. Must start on a newline after the tag.
  </ti>
</tr>
<tr>
  <ti>
    <c>@INTERNAL</c>
  </ti>
  <ti>
    YES
  </ti>
  <ti>
    <d/>
  </ti>
  <ti>
    Indicates that the function is internal to the eclass and should
    not be called from outside.
  </ti>
</tr>
<tr>
  <ti>
    <c>@DESCRIPTION:</c>
  </ti>
  <ti>
    <b>*</b>
  </ti>
  <ti>
    Multiline freetext.
  </ti>
  <ti>
    <p>Long description for the eclass function.</p>
    <p><b>*:</b> Not optional if <c>RETURN:</c> is absent.</p>
  </ti>
</tr>
</table>

</body>
</section>
<section>
<title>Eclass Function Variables</title>
<body>

<p>
Eclass functions may make use of variables just like any other bash
function. Special function-specific variables should be documented
using the following tags:
</p>

<table>
<tr>
  <th>tag</th>
  <th>optional?</th>
  <th>arguments</th>
  <th>description</th>
</tr>
<tr>
  <ti>
    <c>@VARIABLE:</c>
  </ti>
  <ti>
    NO
  </ti>
  <ti>
    Name of the function-specific variable to which the documentation applies.
  </ti>
  <ti>
    This tag applies to variables consumed by specific functions of
    the eclass. They are in effect only when the specific function is
    called.
  </ti>
</tr>
<tr>
  <ti>
    <c>@DEFAULT_UNSET</c>
  </ti>
  <ti>
    YES
  </ti>
  <ti>
    <d/>
  </ti>
  <ti>
    Indicates that this variable is unset by default if not set by the
    developer.
  </ti>
</tr>
<tr>
  <ti>
    <c>@INTERNAL</c>
  </ti>
  <ti>
    YES
  </ti>
  <ti>
    <d/>
  </ti>
  <ti>
    Indicates that the variable is internal to the eclass function.
  </ti>
</tr>
<tr>
  <ti>
    <c>@REQUIRED</c>
  </ti>
  <ti>
    YES
  </ti>
  <ti>
    <d/>
  </ti>
  <ti>
    Indicates that this variable must be set by the developer.
  </ti>
</tr>
<tr>
  <ti>
    <c>@DESCRIPTION:</c>
  </ti>
  <ti>
    NO
  </ti>
  <ti>
    Multiline freetext.
  </ti>
  <ti>
    Long description for the function variable.
  </ti>
</tr>
</table>

</body>
</section>

<section>
<title>Simple Common Functions Eclass Example</title>
<body>

<p>
As an example, the following eclass was written to illustrate a better way of
installing OSX application files during a discussion on this subject. It defines
a single function, <c>domacosapp</c>.
</p>

<codesample lang="ebuild">
# Copyright 1999-2019 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

# @ECLASS: macosapp.eclass
# @MAINTAINER:
# Ciaran McCreesh &lt;ciaranm@gentoo.org&gt;
# @BLURB: install macos .app files to the relevant location.

# @FUNCTION: domacosapp
# @USAGE: &lt;app-file&gt; [new-file]
# @DESCRIPTION:
# Install the given .app file into the appropriate location. If
# [new-file] is given, it will be used as the new (installed) name of
# the file. Otherwise &lt;app-file&gt; is installed as-is.
domacosapp() {
	[[ -z "${1}" ]] &amp;&amp; die "usage: domacosapp &lt;file&gt; [new file]"
	if use ppc-macos ; then
		insinto /Applications
		newins "$1" "${2:-${1}}" || die "Failed to install ${1}"
	fi
}
</codesample>

</body>
</section>

<section>
<title>Export Functions</title>
<body>

<p>
An eclass may provide default implementations for any of the standard ebuild
functions (<c>src_unpack</c>, <c>pkg_postinst</c> etc). This can be done either as a
simple function definition (which is not multiple eclass friendly) or using
<c>EXPORT_FUNCTIONS</c>. Functions given to <c>EXPORT_FUNCTIONS</c> are implemented
as normal, but have their name prefixed with <c>${ECLASS}_</c>.
</p>

<important>
Only 'standard' functions should be specified in <c>EXPORT_FUNCTIONS</c>.
</important>

<note><c>EXPORT_FUNCTIONS</c> is a function, <e>not</e> a variable.</note>

<p>
If multiple eclasses export the same function, the latest (inherited last)
defined version wins.  If an ebuild defines a function that is exported, this
gets priority over any eclass version. This can be used to override
eclass-defined defaults <d/> for example, say we had <c>fnord.eclass</c>:
</p>

<codesample lang="ebuild">
EXPORT_FUNCTIONS src_compile

fnord_src_compile() {
	do_stuff || die
}
</codesample>

<p>
Then an ebuild could do this:
</p>

<codesample lang="ebuild">
inherit fnord.eclass

src_compile() {
	do_pre_stuff || die
	fnord_src_compile
	do_post_stuff || die
}
</codesample>

</body>
</section>

<section>
<title>Simple Build System Eclass Example</title>
<body>

<p>
A simple eclass which defines a number of functions and a default
<c>src_compile</c> for the (hypothetical) <c>jmake</c> build system might look
something like the following:
</p>

<codesample lang="ebuild">
# Copyright 1999-2019 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

# @ECLASS: jmake.eclass
# @MAINTAINER:
# Gentoo Devmanual Project &lt;devmanual@gentoo.org&gt;
# @AUTHOR:
# Ciaran McCreesh &lt;ciaranm@gentoo.org&gt;
# @BLURB: Demonstrate a simple build system eclass.
# @DESCRIPTION:
# Demonstrates EXPORT_FUNCTIONS and defines simple wrappers for the
# (hypothetical) jmake build system and a default src_compile.

EXPORT_FUNCTIONS src_compile

DEPEND="&gt;=sys-devel/jmake-2"

# @FUNCTION: jmake-configure
# @USAGE: [additional-args]
# @DESCRIPTION:
# Passes all arguments through to the appropriate &quot;jmake configure&quot;
# command.
jmake-configure() {
	jmake configure --prefix=/usr "$@"
}

# @FUNCTION: jmake-build
# @USAGE: [additional-args]
# @DESCRIPTION:
# First builds all dependencies, and then passes through its arguments
# to the appropriate &quot;jmake build&quot; command.
jmake-build() {
	jmake dep &amp;&amp; jmake build "$@"
}

# @FUNCTION: jmake-src_compile
# @DESCRIPTION:
# Calls jmake-configure() and jmake-build() to compile a jmake project.
jmake_src_compile() {
	jmake-configure || die "configure failed"
	jmake-build || die "build failed"
}
</codesample>

</body>
</section>

<section>
<title>Handling incorrect usage of an eclass</title>
<body>

<p>
Sometimes an eclass is used incorrectly by an ebuild and the eclass
knows it is being used incorrectly- the common example is an
eclass that only works with a specific set of EAPIs, but is being
accessed inherited by an ebuild with a different EAPI.
In those cases, used sparingly as a last resort, it is allowed
for an eclass to invoke die from the global scope.  For example:
</p>

<codesample lang="ebuild">
# Copyright 1999-2019 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

# @ECLASS: eapi-die.eclass
# @MAINTAINER:
# Gentoo Devmanual Project &lt;devmanual@gentoo.org&gt;
# @BLURB: Calls die when used with an invalid EAPI.

case ${EAPI:-0} in
	0) die "this eclass doesn't support EAPI 0" ;;
	*) ;;
esac
</codesample>
</body>
</section>

</body>

</chapter>
</guide>
