<?xml version="1.0"?>
<guide self="profiles/">
<chapter>
<title>Profiles</title>

<body>
<warning>
This section is currently in process of being corrected and split between
profile files and repository metadata. Treat its contents with caution.
</warning>

<p>
This section provides details on the profile directory format. For other files
in the <c>profiles/</c> directory, please see <uri link="::metadata"/>.
</p>
</body>

<section>
<title>categories</title>

<body>
<p>
The <c>profiles/categories</c> file contains an asciibetically sorted list of all
the valid categories in the Gentoo repository. When adding a new category, remember
to update and commit this file <e>before</e> making any related commits.
</p>

<p>
The <c>categories</c> file is a straight list. For descriptions, see <uri
link="::ebuild-writing/misc-files/metadata/#Category Metadata"/>.
</p>
</body>

</section>

<section>
<title>info_*</title>
<body>

<p>
The <c>profiles/info_pkgs</c> file controls the packages whose versions are listed
when <c>emerge info</c> is run. The <c>profiles/info_vars</c> file controls the
displayed environment variables. Do not add to these files without discussion on
the <c>gentoo-dev</c> mailing list.
</p>

</body>
</section>

<section>
<title>make.defaults</title>
<body>

<p>
The <c>make.defaults</c> file in <c>profiles/</c> provides a minimal set of defaults
for the kinds of values which may be set in <c>make.conf</c> (<c>CFLAGS</c>, <c>USE</c>,
<c>FEATURES</c> etc) along with certain control variables (eg <c>USE_EXPAND</c>).
These values can further be refined by additional <c>make.defaults</c> files in
subprofiles.
</p>

<p>
In general, <c>make.defaults</c> should not be modified without consulting the
relevant arch team, or <c>gentoo-dev</c> for high-up <c>make.defaults</c> files.
</p>

</body>
</section>

<section>
<title>package.mask</title>
<body>

<p>
The <c>package.mask</c> file can be used to hard mask packages or
certain versions of packages that should not be merged by users.
This is often used when adding certain experimental (either in ebuild
or upstream terms) packages to the tree, or to prevent merging of
packages that are broken or break something else. Every entry should
have a comment detailing the specific reason for the mask. The format
of the <c>package.mask</c> file is described in <c>man portage</c>.
</p>

<p>
This file can be used in subprofiles to mask packages only for certain setups.
</p>

</body>
</section>

<section>
<title>packages</title>
<body>

<p>
The <c>packages</c> file in <c>profiles/</c> controls the packages pulled in by the
<c>system</c> target. The <c>base/packages</c> file must not be modified without
discussion on the <c>gentoo-dev</c> list; subprofile overrides are up to the
relevant arch teams.
</p>

<p>
Note that <c>packages</c> can be used to require that specific versions of a package
be used, for example <c>&lt;sys-kernel/linux-headers-2.5</c> in a profile requiring
a 2.4 kernel. If this is done with the intention of requiring <b>only</b> a lower version
(that is to say, not a &gt; or &gt;= restriction, and with slots not affecting the
outcome), then the entry in <c>packages</c> must be accompanied by a corresponding
<c>package.mask</c> entry to ensure that no other versions get installed.
</p>

</body>
</section>

<section>
<title>profiles.desc</title>
<body>

<todo>
Find someone who knows exactly what this file's really used for with
current portage versions and what is and isn't allowed.
</todo>

</body>
</section>

<section>
<title>updates/</title>
<body>

<p>
The files in the <c>updates/</c> directory are organized by quarters of years
and are named <c>&lt;quarter&gt;Q-&lt;year&gt;</c>, e.g. <c>1Q-2010</c>
(quarter count is one-based).
</p>

<p>
These files are simple text files, where each line contains one of the following
commands. Note that these only cause the package manager to adjust its metadata,
the actual changes to the package have to be done manually.
</p>

<table>
  <tr>
    <th>
      Command
    </th>
    <th>
      Description
    </th>
  </tr>
  <tr>
    <ti>
      <c>move oldcat/oldpkg newcat/newpkg</c>
    </ti>
    <ti>
      Indicates the packages has been renamed, moved to another category, or
      both.
    </ti>
  </tr>
  <tr>
    <ti>
      <c>slotmove spec oldslot newslot</c>
    </ti>
    <ti>
      Indicates that the package matching dependency specification <c>spec</c>
      has changed slots.
    </ti>
  </tr>
</table>

</body>
</section>

<section>
<title>use.desc and use.local.desc</title>
<body>

<p>
The <c>use.desc</c> file contains a list of all global non-expanded <c>USE</c> flags,
together with a short description. This file should not be modified without
discussion on the <c>gentoo-dev</c> list.
</p>

<p>
The <c>metadata.xml</c> file on each ebuild category contains a list of the local
<c>USE</c> flags, together with short description for the package in the said category.
More information about the <c>metadata.xml</c> file can be found
<uri link="ebuild-writing/misc-files/metadata/index.html">here.</uri>
</p>

<note>
<c>use.local.desc</c> used to be the default location for all the local useflags.
However, this file is now an autogenerated aggregation of all the <c>metadata.xml</c> files
so you must never edit it directly.
</note>
<p>
Having a small number of packages using identically named local <c>USE</c> flags is
allowed. If the number starts to grow substantially, it may be worth proposing
that the flag becomes a global <d /> see
<uri link="::general-concepts/use-flags#Local and Global USE Flags"/>.
</p>

<p>
All non-expand flags must be listed in exactly one of these files.
</p>

<p>Expanded flags are listed in <c>desc/${prefix}.desc</c>, where <c>${prefix}</c> is the
name of the environment variable to be expanded in lowercase. Instead of listing the
complete flag only the flag's suffix, i.e. the environment variable's possible values are
listed.</p>

</body>
</section>

<section>
<title>use.mask</title>
<body>

<p>
The <c>use.mask</c> file can be used to mark <c>USE</c> flags as unavailable on a
particular profile. This can be useful for various reasons:
</p>

<ul>
  <li>
    Masking hardware-specific feature flags. For example, <c>mmx</c> and <c>sse</c> are
    only available on x86, <c>altivec</c> is only available on <c>ppc</c> and <c>vis</c> is
    only available on sparc v9.
  </li>
  <li>
    Disabling unavailable soft dependencies. A simple hypothetical example <d /> say
    <c>fooapp</c> works on <c>mips</c>, but has an optional dependency (controlled by
    the <c>bar</c> flag) upon <c>libbar</c>, which doesn't work on <c>mips</c>. Then by
    adding the <c>bar</c> flag to <c>profiles/arch/mips/use.mask</c>,
    <c>fooapp</c> could be made available to <c>mips</c> users with the unresolvable
    dependency forcibly disabled.
  </li>
</ul>

<p>
Note that <c>use.mask</c> is a per-flag thing, not per package's use of a given
flag. This is one of the reasons that USE flags must have a specific well
defined purpose.
</p>

<p>
Updates to <c>use.mask</c> should be handled via the relevant arch team.
</p>

<p>
See <uri link="::general-concepts/use-flags/#noblah USE Flags"/> for more discussion.
</p>

</body>
</section>

</chapter>
</guide>
