<?xml version="1.0" encoding="UTF-8"?>
<guide self="tools-reference/find/">
<chapter>
<title><c>find</c> â€” finding files</title>
<body>

<p>
The <c>find</c> utility can be used to search for and perform commands upon
groups of files matching a given set of criteria. The basic usage is
<c>find path rules</c>.
</p>

<p>
For portability purposes, <b>always</b> specify a path. Do not rely
upon <c>find</c> defaulting to the current working directory if no
path is provided.
</p>

<p>
Useful rules include:
</p>

<table>
  <tr>
    <th>Rule</th>
    <th>Effect</th>
    <th>POSIX?</th>
  </tr>
  <tr>
    <ti><c>-name "blah"</c></ti>
    <ti>
      Only find files named <c>blah</c>. The <c>*</c> and <c>?</c>
      wildcards may be used but should be quoted as in <c>-name 'blah*'</c>.
    </ti>
    <ti>yes</ti>
  </tr>
    <tr>
    <ti><c>\! -name "blah"</c></ti>
    <ti>
      Only find files not named <c>blah</c>.
    </ti>
    <ti>yes</ti>
  </tr>
  <tr>
    <ti><c>-type f</c></ti>
    <ti>Find only regular files, not directories.</ti>
    <ti>yes</ti>
  </tr>
  <tr>
    <ti><c>-type d</c></ti>
    <ti>Find only directories.</ti>
    <ti>yes</ti>
  </tr>
  <tr>
    <ti><c>-type l</c></ti>
    <ti>Find only symbolic links.</ti>
    <ti>yes</ti>
  </tr>
  <tr>
    <ti><c>-user foo</c></ti>
    <ti>
      Find only files belonging to user <c>foo</c>. It is best to use
      named users rather than numeric UIDs. In particular, <c>root</c>
      may not be UID 0 on some systems.
    </ti>
    <ti>yes</ti>
  </tr>
  <tr>
    <ti><c>-group foo</c></ti>
    <ti>
      Find only files belonging to group <c>foo</c>. It is best to use
      named groups rather than numeric GIDs.
    </ti>
    <ti>yes</ti>
  </tr>
  <tr>
    <ti><c>-maxdepth 3</c></ti>
    <ti>
     Only descend 3 levels into subdirectories.
     <c>-maxdepth 1</c> will ignore all subdirectories of the specified path.
    </ti>
    <ti>no, GNU and BSD</ti>
  </tr>
  <tr>
    <ti><c>-mindepth 2</c></ti>
    <ti>
     Ignore the first 2 directory levels before a match occurs.
     <c>-mindepth 1</c> will process all files except the command line arguments.
    </ti>
    <ti>no, GNU and BSD</ti>
  </tr>
  <tr>
    <ti><c>-exec foo '{}'</c></ti>
    <ti>
     Execute a command. <c>{}</c> is replaced by the name of the
     current matched file. See examples below.
    </ti>
    <ti>yes</ti>
  </tr>
  <tr>
    <ti><c>-execdir foo '{}'</c></ti>
    <ti>
     Same as <c>-exec</c> but runs the command from within the basedir
     of the match.
    </ti>
    <ti>no, GNU and BSD</ti>
  </tr>
    <tr>
    <ti><c>-delete</c></ti>
    <ti>
     Delete the match.
    </ti>
    <ti>no, GNU and FBSD</ti>
  </tr>
  <tr>
    <ti><c>-print0</c></ti>
    <ti>
      Separate file names by a NUL character instead of a newline in
      the output. This is useful for guarding against files which may
      include a newline in their names.
    </ti>
    <ti>no, GNU and FBSD</ti>
  </tr>
</table>

<note>
EAPI&gt;=5 assumes GNU find, so it is safe to use GNU extensions in
ebuild context for those EAPIs.
</note>

<p>
By default, <c>find</c> will echo a list of matching files to the
standard output separated by newlines. It can be combined with a
<c>for</c> loop for a small number of files with no weird characters
and spaces in their names:
</p>

<codesample lang="ebuild">
for f in $(find "${S}" -type f) ; do
	einfo "Doing unholy things to ${f}"
done
</codesample>

<p>
The above loop may cause issues with files containing special
characters in their names. A better way is to run <c>find</c> with the
<c>-print0</c> option in a <c>while</c> loop (note the options passed
to <c>while</c> and <c>read</c> for changing the delimiter):
</p>

<codesample lang="ebuild">
while IFS="" read -d $'\0' -r f ; do
	einfo "Calling down holy vengance upon ${f}"
done &lt; &lt;(find "${S}" -type f -print0)
</codesample>

<p>
As an alternative you can use the <c>-exec</c> argument. Be careful
with escaping to ensure that <c>bash</c> doesn't gobble up the special
characters:
</p>

<codesample lang="ebuild">
find "${S}" -name '*.data' -exec mv '{}' "${S}/data/" \;
</codesample>

<p>
When <c>-exec</c> is terminated by a <c>;</c> character
(needs escaping or quoting) then the command line is built separately
for every match.
If it is terminated by a <c>+</c> character then the command line is
built by appending each selected file name at the end.
</p>

<p>
The syntax below is useful if the command you want to run accepts multiple
arguments such as <c>doins</c> and is more efficient in that case:
</p>

<codesample lang="ebuild">
find "${S}" -name '*.so*' -exec doexe '{}' +
</codesample>

<p>
Find also supports negative matches:
</p>

<codesample lang="ebuild">
find "${S}/bundled-libs" \! -name 'libbass.so' -delete
</codesample>

<p>
This will delete all files in the "bundled-libs" folder except "libbass.so".
Make sure you always escape the <c>!</c> character, so it's not
interpreted by the shell.
</p>

<warning>
The <c>-exec</c> argument has security issues, because of
<uri link="https://www.gnu.org/software/findutils/manual/html_mono/find.html#Race-Conditions-with-_002dexec">race conditions</uri>
(this is also true for <c>find . -print0 | xargs ...</c> constructs).
This should not be a problem in ebuild context, because directories
typically aren't writeable by random users. However you should
consider <c>-execdir</c> as an alternative approach which runs the
command from inside the basedir of the match (note that <c>-execdir</c>
is not POSIX, see the table).
</warning>

<p>
See <c>find(1)</c> and
<uri link="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/find.html">
IEEE Std 1003.1-2017-find</uri> for further details and examples.
</p>

</body>
</chapter>
</guide>
