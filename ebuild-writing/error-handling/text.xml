<?xml version="1.0"?>
<guide self="ebuild-writing/error-handling/">
<chapter>
<title>Error Handling</title>

<section>
<title>Importance of Error Handling</title>
<body>

<p>
Decent error handling is important because:
</p>

<ul>
  <li>
  Errors must be detected <e>before</e> Portage tries to install a broken or
  incomplete package onto the live filesystem. If build failures aren't caught,
  a working package could be unmerged and replaced with nothing.
  </li>
  <li>
  When receiving bug reports, it is a lot easier to figure out what went wrong
  if you know exactly which call caused the error, rather than just knowing
  that, say, something somewhere in <c>src_compile</c> broke.
  </li>
  <li>
  Good error handling and notification can help cut down on the number of bug
  reports received for a package.
  </li>
</ul>

</body>
</section>

<section>
<title>The <c>die</c> Function</title>
<body>

<p>
The <c>die</c> function should be used to indicate a fatal error and abort the
build. Its parameters should be the message to display.
</p>

<p>
Although <c>die</c> will work with no parameters, a short message should always be
provided to ease error identification. This is especially important when a
function can die in multiple places.
</p>

<p>
Ebuild helpers automatically die on failure. Some eclass-provided functions
will automatically die upon failure, others will not. Developers should check
the <uri link="::eclass-reference/">eclass reference</uri> when in doubt.
</p>

<p>
Sometimes displaying additional error information beforehand can be useful. Use
<c>eerror</c> to do this. See <uri link="::ebuild-writing/messages"/>.
</p>

<note>
You should use <c>die</c> on almost all external commands in ebuilds.
</note>

</body>
</section>

<section>
<title><c>die</c> and Subshells</title>
<body>

<warning>
<c>die</c> <b>will not work in a subshell unless you are using EAPI=7 and onwards</b>.
</warning>

<p>
The following code will not work as expected, since the <c>die</c> is inside a
subshell:
</p>

<codesample lang="ebuild">
[[ -f foorc ]] &amp;&amp; ( update_foorc || die "Couldn't update foorc!" )
</codesample>

<p>
The correct way to rewrite this is to use an <c>if</c> block:
</p>

<codesample lang="ebuild">
if [[ -f foorc ]] ; then
	update_foorc || die "Couldn't update foorc!"
fi
</codesample>

<p>
When using pipes, a subshell is introduced, so the following is unsafe:
</p>

<codesample lang="ebuild">
cat list | while read file ; do eapply ${file} ; done
</codesample>

<p>
Using input redirection (see <uri link="::tools-reference/cat/#Abuse of cat"/>)
avoids this problem:
</p>

<codesample lang="ebuild">
while read file ; do eapply ${file} ; done &lt; list
</codesample>

</body>
</section>

<section>
<title>The <c>assert</c> Function and <c>$PIPESTATUS</c></title>
<body>

<p>
When using pipes, simple conditionals and tests upon <c>$?</c> will not correctly
detect errors occurring in anything except the final command in the chain. To get
around this, <c>bash</c> provides the <c>$PIPESTATUS</c> variable, and Portage
provides the <c>assert</c> function to check this variable.
</p>

<codesample lang="ebuild">
bunzip2 "${DISTDIR}/${VIM_RUNTIME_SNAP}" | tar xf
assert
</codesample>

<p>
If you need the gory details of <c>$PIPESTATUS</c>, see the bash manpage. Most of the
time, <c>assert</c> is enough.
</p>

</body>
</section>

<section>
<title>The <c>nonfatal</c> Command</title>
<body>

<p>
If a non-zero exit status from an ebuild helper function is expected, you may
call it under the <c>nonfatal</c> function. Instead of dying on failure,
the command will then return non-zero exit status, as in the following example:
</p>

<codesample lang="ebuild">
src_test() {
	if ! nonfatal emake check ; then
		local a
		eerror "Tests failed. Looking for files to add to your bug report..."
		while IFS='' read -r -d $'\0' a ; do
			eerror "    ${a}"
		done &lt; &lt;(find "${S}" -type f -name '*.log' -print0)
		die "Make check failed"
	fi
}
</codesample>

</body>
</section>
</chapter>
</guide>
