<?xml version="1.0"?>
<guide self="ebuild-writing/variables/">
<chapter>
<title>Variables</title>

<body>
<p>
There are a number of special variables which must be set in ebuilds, and many
more which can optionally be specified. There are also some predefined variables
which are of use throughout the ebuild.
</p>
</body>

<section>
<title>Predefined Read-Only Variables</title>
<body>

<p>
The following variables are defined for you. You must not attempt to
set them. Developers must not rely on package manager specific values
for these variables when writing ebuilds.
</p>

<table>
  <tr>
    <th>Variable</th>
    <th>Purpose</th>
  </tr>
  <tr>
    <ti><c>P</c></ti>
    <ti>Package name and version (excluding revision, if any), for example <c>vim-6.3</c>.</ti>
  </tr>
  <tr>
    <ti><c>PN</c></ti>
    <ti>Package name, for example <c>vim</c>.</ti>
  </tr>
  <tr>
    <ti><c>PV</c></ti>
    <ti>Package version (excluding revision, if any), for example <c>6.3</c>. It should reflect the upstream versioning scheme.</ti>
  </tr>
  <tr>
    <ti><c>PR</c></ti>
    <ti>Package revision, or <c>r0</c> if no revision exists.</ti>
  </tr>
  <tr>
    <ti><c>PVR</c></ti>
    <ti>Package version and revision (if any), for example <c>6.3</c>, <c>6.3-r1</c>.</ti>
  </tr>
  <tr>
    <ti><c>PF</c></ti>
    <ti>Full package name, <c>${PN}-${PVR}</c>, for example <c>vim-6.3-r1</c>.</ti>
  </tr>
  <tr>
    <ti><c>A</c></ti>
    <ti>
      All the source files for the package (excluding those
      which are not available because of <c>USE</c> flags).
    </ti>
  </tr>
  <tr>
    <ti><c>CATEGORY</c></ti>
    <ti>Package's category, for example <c>app-editors</c>.</ti>
  </tr>
  <tr>
    <ti><c>FILESDIR</c></ti>
    <ti>
      Path to the ebuild's <c>files/</c> directory, commonly used
      for small patches and files. For example:
      <c>"${PORTDIR}/${CATEGORY}/${PN}/files"</c>.
    </ti>
  </tr>
  <tr>
    <ti><c>WORKDIR</c></ti>
    <ti>
      Path to the ebuild's root build directory. For example:
      <c>"${PORTAGE_BUILDDIR}/work"</c>.
    </ti>
  </tr>
  <tr>
    <ti><c>T</c></ti>
    <ti>
       Path to a temporary directory which may be used by the
       ebuild. For example: <c>"${PORTAGE_BUILDDIR}/temp"</c>.
    </ti>
  </tr>
  <tr>
    <ti><c>D</c></ti>
    <ti>
      Path to the temporary install directory. For example:
      <c>"${PORTAGE_BUILDDIR}/image"</c>.
    </ti>
  </tr>
  <tr>
    <ti><c>HOME</c></ti>
    <ti>
      Path to a temporary directory for use by any programs invoked by
      an ebuild that may read or modify the home directory. For example:
      <c>"${PORTAGE_BUILDDIR}/homedir"</c>.
    </ti>
  </tr>
  <tr>
    <ti><c>ROOT</c></ti>
    <ti>
      The absolute path to the root directory into which the package is to be
      merged. Only allowed in pkg_* phases. See
      <uri link="::ebuild-writing/variables#ROOT"/>
    </ti>
  </tr>
  <tr>
    <ti><c>DISTDIR</c></ti>
    <ti>
      Contains the path to the directory where all the files
      fetched for the package are stored.
    </ti>
  </tr>
  <tr>
    <ti><c>EPREFIX</c></ti>
    <ti>
      The normalised offset-prefix path of an offset installation.
    </ti>
  </tr>
  <tr>
    <ti><c>ED</c></ti>
    <ti>
      Shorthand for <c>${D%/}${EPREFIX}/</c>.
    </ti>
  </tr>
  <tr>
    <ti><c>EROOT</c></ti>
    <ti>
      Shorthand for <c>${ROOT%/}${EPREFIX}/</c>.
    </ti>
  </tr>
  <tr>
    <ti><c>SYSROOT</c></ti>
    <ti>
      (EAPI=7) The absolute path to the root directory containing build dependencies
		satisfied by <c>DEPEND</c>
    </ti>
  </tr>
  <tr>
    <ti><c>ESYSROOT</c></ti>
    <ti>
      (EAPI=7) Shorthand for <c>${SYSROOT%/}${EPREFIX}/</c>.
    </ti>
  </tr>
  <tr>
    <ti><c>BROOT</c></ti>
    <ti>
      (EAPI=7) The absolute path to the root directory containing build dependencies
		satisfied by <c>BDEPEND</c>, typically executable build tools.
    </ti>
  </tr>
</table>

</body>
</section>

<section>
<title>Ebuild-defined Variables</title>
<body>

<p>
The following variables may or must be defined by every ebuild.
</p>

<table>
  <tr>
    <th>Variable</th>
    <th>Purpose</th>
  </tr>
  <tr>
    <ti><c>EAPI</c></ti>
    <ti>
    The EAPI. See <uri link="::ebuild-writing/eapi"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>DESCRIPTION</c></ti>
    <ti>
    A short (not more than 80 characters) description of the package's
    purpose. Mandatory.
    </ti>
  </tr>
  <tr>
    <ti><c>HOMEPAGE</c></ti>
    <ti>
    Package's homepage. Mandatory (except for virtuals). If you are
    unable to locate an official one, try to provide a link to
    <uri link="http://freshmeat.net">freshmeat.net</uri> or a similar
    package tracking site. If the homepage of the package is unavailable
    and no new location can be found, please update it to
    <c>https://wiki.gentoo.org/wiki/No_homepage</c>.
    Never refer to a variable name in the string; include only raw text.
    </ti>
  </tr>
  <tr>
    <ti><c>SRC_URI</c></ti>
    <ti>
    A list of source URIs for the package. Can contain
    <c>USE</c>-conditional parts, see
    <uri link="::ebuild-writing/variables#SRC_URI"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>LICENSE</c></ti>
    <ti>
    The package's license, corresponding exactly (including case)
    to a file in <c>licenses/</c>. Mandatory (except for virtuals).
    See <uri link="::ebuild-writing/variables#LICENSE"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>SLOT</c></ti>
    <ti>
    The package's <c>SLOT</c>. Mandatory.
    See <uri link="::ebuild-writing/variables#SLOT"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>KEYWORDS</c></ti>
    <ti>
    See <uri link="::ebuild-writing/variables#KEYWORDS"/> and
    <uri link="::keywording/"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>IUSE</c></ti>
    <ti>
    A list of all <c>USE</c> flags (excluding arch flags, but
    including <c>USE_EXPAND</c> flags) used within the ebuild. See
    <uri link="::ebuild-writing/variables#IUSE"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>REQUIRED_USE</c></ti>
    <ti>
    A list of assertions that must be met by the configuration of
    <c>USE</c> flags to be valid for this ebuild. (Requires EAPI>=4.)
    See <uri link="::ebuild-writing/variables#REQUIRED_USE"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>PROPERTIES</c></ti>
    <ti>
    A space-delimited list of properties, with conditional syntax support.
    <c>interactive</c> is the only valid value for now.
    </ti>
  </tr>
  <tr>
    <ti><c>RESTRICT</c></ti>
    <ti>
    A space-delimited list of portage features to restrict.
    Valid values are <c>fetch</c>, <c>mirror</c>, <c>strip</c>, <c>test</c> and
    <c>userpriv</c>. See <c>man 5 ebuild</c> for details.
    </ti>
  </tr>
  <tr>
    <ti><c>DEPEND</c></ti>
    <ti>
    A list of the package's build dependencies.  See
    <uri link="::general-concepts/dependencies"/>.
    Starting with EAPI-7, applies to CHOST only.
    </ti>
  </tr>
  <tr>
    <ti><c>BDEPEND</c></ti>
    <ti>
    (EAPI=7) A list of the package's CBUILD build dependencies.  See
    <uri link="::general-concepts/dependencies"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>RDEPEND</c></ti>
    <ti>
    A list of the package's runtime dependencies. See
    <uri link="::general-concepts/dependencies"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>PDEPEND</c></ti>
    <ti>
    A list of packages to be installed (if possible) after the package
    is merged. Use this only when <c>RDEPEND</c> would cause cyclic
    dependencies. See <uri link="::general-concepts/dependencies"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>S</c></ti>
    <ti>
    Path to the temporary build directory, used by
    <c>src_compile</c> and <c>src_install</c>. Default:
    <c>"${WORKDIR}/${P}"</c>. Ebuilds should <b>not</b> provide a
    value for this variable if it is the same as the default value.
    </ti>
  </tr>
  <tr>
    <ti><c>DOCS</c></ti>
    <ti>
    An array or space-delimited list of documentation files for
    the default src_install function to install using dodoc. If
    undefined, a reasonable default list is used. (Requires
    <uri link="::ebuild-writing/eapi/#eapi=4">EAPI>=4</uri>.)
    </ti>
  </tr>
  <tr>
    <ti><c>HTML_DOCS</c></ti>
    <ti>
    An array or space-delimited list of documentation files or
    directories for the <c>einstalldocs</c> function to install
    recursively. (Requires
    <uri link="::ebuild-writing/eapi/#eapi=6">EAPI>=6</uri>.)
    </ti>
  </tr>
</table>

</body>
</section>

<section>
<title>SLOT</title>
<body>

<p>
When slots are not needed, use <c>SLOT="0"</c>. Do <b>not</b> use <c>SLOT=""</c>, as
this will disable slotting for this package.
</p>

<p>
See <uri link="::general-concepts/slotting/" /> for more information on this variable.
</p>

</body>
</section>

<section>
<title>KEYWORDS</title>
<body>

<p>
The only valid construct involving a <c>*</c> inside <c>KEYWORDS</c> is a <c>-*</c>. Do
<b>not</b> use <c>KEYWORDS="*"</c> or <c>KEYWORDS="~*"</c>.
</p>

<p>
See <uri link="::keywording/"/> for how to handle this variable.
</p>

</body>
</section>

<section>
<title>SRC_URI</title>

<subsection>
<title>Conditional Sources</title>
<body>

<p>
Conditional source files based upon USE flags are allowed using the usual
<c>flag? ( )</c> syntax. This is often useful for arch-specific code or for binary
packages <d/> downloading sparc binaries on ppc would be a waste of bandwidth.
</p>

<codesample lang="ebuild">
SRC_URI="https://example.com/files/${P}-core.tar.bz2
	x86?   ( https://example.com/files/${P}/${P}-sse-asm.tar.bz2 )
	ppc?   ( https://example.com/files/${P}/${P}-vmx-asm.tar.bz2 )
	sparc? ( https://example.com/files/${P}/${P}-vis-asm.tar.bz2 )
	doc?   ( https://example.com/files/${P}/${P}-docs.tar.bz2 )"
</codesample>

</body>
</subsection>

<subsection>
<title>Renaming Sources</title>
<body>

<p>
Sometimes the upstream URI uses generic names that can easily clash with other
packages when creating a single mirror. Using the <c>-&gt;</c> syntax allows
you to rename the file when it's fetched from upstream for storing on mirrors
and in the local distdir.
</p>

<p>
Here we download a file from upstream which has a plain name like
<c>1.0.tar.gz</c> and save/mirror it with a better name like
<c>thepackage-1.0.tar.gz</c>.
</p>

<codesample lang="ebuild">
SRC_URI="https://example.com/files/${PV}.tar.gz -> ${P}.tar.gz"
</codesample>

</body>
</subsection>


<subsection>
  <title>Third-party mirrors</title>
  <body>
    <p>
      If the items in <c>SRC_URI</c> are available on multiple
      third-party mirrors, then you don't have to list each mirror in
      your ebuild. The <c>profiles/thirdpartymirrors</c> file in the
      <c>::gentoo</c> repository contains named groups of mirrors,
      accessible through the <c>mirror://</c> pseudo-protocol.
    </p>
    <p>
      As of EAPI 7, the format of <uri
      link="https://projects.gentoo.org/pms/7/pms.html#x1-340004.4.2">the
      thirdpartymirrors file</uri> is described in section 4.4.2 of
      the Package Manager Specification (PMS). One might define a set
      of &quot;example&quot; mirrors,
    </p>
<!--
  The following isn't ebuild code, but lang="ebuild" works, and no
  other language choice would be accurate either.
-->
<codesample lang="ebuild">
example https://download.example.com https://mirror1.example.org/example
</codesample>
    <p>
      that can afterwards be referenced through a <c>mirror://</c>
      URL:
    </p>
<codesample lang="ebuild">
SRC_URI="mirror://example/${PN}/${P}.tar.gz"
</codesample>
    <warning>
      If the sources for a package are neither mirror-restricted nor
      fetch-restricted, then they will be <uri
      link="::general-concepts/mirrors">mirrored onto Gentoo
      infrastructure</uri> automatically; in that case, there is
      little benefit to using this feature. There is a maintenance
      burden associated with using a third-party mirror list: it must
      be updated when new mirrors are born and when old mirrors
      die. Please consider that when deciding whether or not to use
      this feature.
    </warning>
  </body>
</subsection>
</section>

<section>
<title>IUSE</title>
<body>

<p>
Note that the <c>IUSE</c> variable is cumulative, so there is no need to specify
USE flags used only within inherited eclasses within the ebuild's IUSE.
</p>
<note>
You need not assign the IUSE variable in your ebuild if it is empty.
</note>

<p>
Arch USE flags (<c>sparc</c>, <c>mips</c>, <c>x86-fbsd</c> and so on) should not be
listed.
</p>

</body>
</section>

<section>
<title>LICENSE</title>
<body>

<p>
It is possible to specify multiple <c>LICENSE</c> entries, and entries which only
apply if a particular <c>USE</c> flag is set. The format is the same as for
<c>DEPEND</c>. See <uri link="https://www.gentoo.org/glep/glep-0023.html">
GLEP 23</uri> for details.
</p>

</body>
</section>

<section>
<title>ROOT</title>
<body>

<p>
The idea behind <c>ROOT</c> is that one can build a system with
<c>ROOT=/somewhere</c> and then chroot into it or tar up
<c>/somewhere</c> as a system image. It is not designed to allow the
user to run <c>/somewhere/usr/bin/foo</c>.
</p>

<p>
Ebuilds may reference <c>ROOT</c> only during <c>pkg_*</c> phases. It
can't be used correctly in <c>src_*</c> phases, since <c>ROOT</c> may
be different when merging a binary package. For example, a binary
package may be built with <c>ROOT=/</c> and then installed onto a
system using <c>ROOT=/somewhere</c>.
</p>

<p>
When building a package, <c>ROOT</c> should not be used to satisfy the
required dependencies on libraries, headers files etc. Instead, the
files on the build system should be specified using <c>/</c>.
</p>

<p>
In a cross compiling environment, ebuilds must not call any of the
binaries inside <c>ROOT</c> since they may not be executable on the
build system.
</p>

<p>
Below is an example of an ebuild that uses <c>ROOT</c> in
<c>pkg_postinst()</c> to conditionally print an error message if an
old and obsolete configuration file still exists:

<codesample lang="ebuild">
pkg_postinst() {
	if [[ -e "${ROOT}etc/oldconfig" ]]; then
		ewarn "You still have the obsolete config file "
		ewarn "    ${ROOT}etc/oldconfig."
		ewarn "Please migrate your settings to ${ROOT}etc/newconfig"
		ewarn "and remove ${ROOT}etc/oldconfig."
	fi
}
</codesample>
</p>

</body>
</section>

<section>
<title>Version and Name Formatting Issues</title>
<body>

<p>
Often upstream's tarball versioning or naming format doesn't quite follow Gentoo
conventions. Using capital letters in names or differences in how underscores and hyphens
are used in versions are particularly common. For example, what Gentoo calls <c>foo-1.2.3b</c> may be
expecting a tarball named <c>Foo-1.2-3b.tar.bz2</c>. Rather than hard coding the package string,
it is preferable to make <c>MY_PN</c>, <c>MY_PV</c> and <c>MY_P</c> variables and use those to define the
upstream naming.
EAPI=7 debuted a new set of functions, ver_cut, ver_rs and ver_test.
These were backported into older EAPIs with the <c>eapi7-ver</c> eclass.
The easy way of redefining the version, which should be used unless you are sure
you know what you are doing, is to use these functions:
</p>

<codesample lang="ebuild">
inherit eapi7-ver
MY_PN="Foo"
# Replace the second period separator in PV with -
MY_PV=$(ver_rs 2 '-')
MY_P="${MY_PN}-${MY_PV}"
</codesample>

<p>
This code has the advantage that it will carry on working even if upstream
switches to a format like <c>Foo-1.3-4.5.tar.bz2</c> (yes, this really happens).
</p>

<p>
It is also possible to use bash substitution to achieve the same effect (this is
how eapi7-ver works internally), but this is complicated, error prone and hard
to read.
</p>

<p>
Some ebuilds use calls to <c>sed</c>, <c>awk</c> and / or <c>cut</c> to do this. This
must <e>not</e> be done for any new code, and should be fixed to use either
eapi7-ver or bash substitution where possible. Global scope non-bash code is
highly discouraged.
</p>

<p>
The ver_ functions are used extract particular components
from a version string. See <c>man eapi7-ver.eclass</c> and the eclass source code
for further documentation and examples. A brief summary of the functions
follows.
</p>

<table>
  <tr>
    <th>Function</th>
    <th>Purpose</th>
  </tr>
  <tr>
    <ti><c>ver_rs [range] ' '</c></ti>
    <ti>Get important version components, excluding '.', '-' and '_'.</ti>
  </tr>
  <tr>
    <ti><c>ver_cut 1</c></ti>
    <ti>Get the major version.</ti>
  </tr>
  <tr>
    <ti><c>ver_cut [range]</c></ti>
    <ti>Extract a range of subparts from a version string.</ti>
  </tr>
  <tr>
    <ti><c>ver_cut 2-</c></ti>
    <ti>Get everything after the major version.</ti>
  </tr>
  <tr>
    <ti><c>ver_rs [range] [char]</c></ti>
    <ti>Replace a particular version separator.</ti>
  </tr>
  <tr>
    <ti><c>ver_rs 1- [char]</c></ti>
    <ti>Replace all version separators.</ti>
  </tr>
  <tr>
    <ti><c>ver_rs [range] ''</c></ti>
    <ti>Delete a version separator.</ti>
  </tr>
  <tr>
    <ti><c>ver_rs 1- ''</c></ti>
    <ti>Delete all version separators.</ti>
  </tr>
</table>

</body>
</section>

<section>
<title>Trailing Slashes in Variables</title>
<body>

<p>
The following variables always end in a trailing slash by default:
<c>D</c>, <c>ED</c>, <c>ROOT</c>, <c>EROOT</c>. Therefore, there is no
need to suffix them with <c>/</c> when joining paths.
</p>

<note>
Future EAPI may remove the trailing slash at the end per
<uri link="https://bugs.gentoo.org/465772">Bug 465772</uri>.
To ease the transition, and ensure maximum compatibility with both the
current and the future EAPI, developers are encouraged to use the bash
suffix removal for the trailing slash and add an explicit <c>/</c>
when joining paths. For example: <c>${D%/}/</c>, <c>${ED%/}/</c>,
<c>${ROOT%/}/</c>, <c>${EROOT%/}/</c>.
</note>

</body>
</section>

<section>
<title>Use of constant-value variables in ebuilds</title>
<body>

<p>
Variables have significant value in ebuilds, making it possible to avoid
unnecessary repetitions and make maintenance easier.  However,
references to constant-value variables should be used with care as their
excessive use can harm readability and increase maintenance burden (e.g.
when renaming a package). In particular, using variables whose values
have no direct correlation with the expected string should be avoided.
</p>

<p>The examples of beneficial constant-value variable references are:</p>
<ul>
  <li>
    using <c>${PV}</c> and the variables derived from it (<c>${P}</c>,
    <c>${MY_P}</c>…) in <c>SRC_URI</c> and <c>S</c> to avoid having
    to update those variables for every version bump (assuming that
    <c>${PV}</c> is used to indicate the upstream version);
  </li>

  <li>
    using <c>${PF}</c> in <c>--docdir</c> path — this is a canonical
    Gentoo path that is always required to match <c>${PF}</c>.
  </li>
</ul>

<p>The examples of bad constant-value variable references are:</p>
<ul>
  <li>
    using <c>${PN}</c> in <c>HOMEPAGE</c>, <c>EGIT_REPO_URI</c>
    or the domain of <c>SRC_URI</c> — it breaks URL parsing in editors
    and terminals, and makes it hard to copy the link for external use
    (e.g. while reviewing via gitweb),
  </li>

  <li>
    using <c>${PN}</c> (or other unnecessary helper variables)
    excessively in <c>src_install()</c> — it impairs readability for
    little benefit and causes a lot of trouble when the package needs to
    be renamed.
  </li>
</ul>

</body>
</section>

<section>
<title>REQUIRED_USE</title>
<body>
<p>
The <c>REQUIRED_USE</c> variable contains a list of assertions that must be
met by the configuration of USE flags to be valid for this ebuild. In order
to be matched, a USE flag in a terminal element must be enabled
(or disabled if it has an exclamation mark prefix).
</p>

<p>
Essentially, <c>REQUIRED_USE</c> is an analogue of <c>DEPEND</c> style syntax.
For example, to state that some combination is forbidden, i.e. &quot;if foo is set, bar must be unset&quot;:
</p>

<codesample lang="ebuild">
REQUIRED_USE="foo? ( !bar )"
</codesample>
<p>
To state "if foo is set, then at least one of bar, baz, and quux must be activated":
</p>
<codesample lang="ebuild">
REQUIRED_USE="foo? ( || ( bar baz quux ) )"
</codesample>
<p>
To state "exactly one of foo, bar, or baz must be set, but not several":
</p>
<codesample lang="ebuild">
REQUIRED_USE="^^ ( foo bar baz )"
</codesample>
<p>
Note that the last relationship is that of an Exclusive OR (XOR).
While an XOR could be formed from usual DEPEND syntax,
a specific ^^ operator has been added for this case.
</p>
<p>
Finally, to state "at least one of foo, bar, or baz must be set":
</p>
<codesample lang="ebuild">
REQUIRED_USE="|| ( foo bar baz )"
</codesample>
<important>
See section <uri link="::general-concepts/use-flags/#conflicting-use-flags" />
for when (and when not) to use <c>REQUIRED_USE</c>.
</important>

<subsection>
<title>EAPI 5</title>
<body>
<p>
EAPI 5 added an additional case to simplify conflicting USE flags.
</p>
<p>
To state "zero or one of foo, bar, or baz must be set, but not several":
</p>
<codesample lang="ebuild">
REQUIRED_USE="?? ( foo bar baz )"
</codesample>
<p>In the previous EAPI, this would be the same as:</p>
<codesample lang="ebuild">
REQUIRED_USE="foo? ( !bar !baz ) bar? ( !foo !baz ) baz? ( !foo !bar )"
</codesample>
</body>
</subsection>
</body>
</section>

</chapter>
</guide>
