<?xml version="1.0"?>
<guide self="ebuild-writing/file-format/">
<chapter>
<title>Ebuild File Format</title>

<body>
<p>
An ebuild is a <c>bash</c> script which is executed within a special environment.
Files should be simple text files with a <c>.ebuild</c> extension.
</p>
</body>

<section>
<title>File Naming Rules</title>
<body>

<p>
An ebuild should be named in the form <c>name-version.ebuild</c>.
</p>

<p>
The name section should contain only lowercase non-accented letters, the digits
0-9, hyphens, underscores and plus characters. Uppercase characters are strongly
discouraged, but technically valid.
</p>

<note>
This is the same as
<uri link="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_278">
IEEE Std 1003.1-2013, section 3.278</uri>, with the exception of the period
character and with the addition of the plus character to keep GTK+ and friends
happy.
</note>

<p>
The name must not begin with a hyphen or a plus sign, and must not end
in a hyphen followed by anything that could be mistaken for a version.
</p>

<p>
The version section is more complicated. It consists of one or more numbers
separated by full stop (or period, or dot, or decimal point) characters (eg
<c>1.2.3</c>, <c>20050108</c>). The final number may have a single letter following it
(e.g. <c>1.2b</c>). This letter should not be used to indicate 'beta' status <d/>
portage treats <c>1.2b</c> as being a later version than <c>1.2</c> or <c>1.2a</c>.
</p>

<p>
There can be a suffix to version indicating the kind of release. In the following table,
what portage considers to be the 'lowest' version comes first.
</p>

<table>
  <tr>
    <th>Suffix</th>
    <th>Meaning</th>
  </tr>
  <tr>
    <ti><c>_alpha</c></ti>
    <ti>Alpha release (earliest)</ti>
  </tr>
  <tr>
    <ti><c>_beta</c></ti>
    <ti>Beta release</ti>
  </tr>
  <tr>
    <ti><c>_pre</c></ti>
    <ti>Pre release</ti>
  </tr>
  <tr>
    <ti><c>_rc</c></ti>
    <ti>Release candidate</ti>
  </tr>
  <tr>
    <ti>(no suffix)</ti>
    <ti>Normal release</ti>
  </tr>
  <tr>
    <ti><c>_p</c></ti>
    <ti>Patch release</ti>
  </tr>
</table>

<p>
Any of these suffixes may be followed by an unsigned integer.
</p>

<p>
These suffixes can be chained together and will be processed iteratively.  To
give some examples (the following list is from lowest version to highest):

<ul>
  <li>foo-1.0.0_alpha_pre</li>
  <li>foo-1.0.0_alpha_rc1</li>
  <li>foo-1.0.0_beta_pre</li>
  <li>foo-1.0.0_beta_p1</li>
</ul>
</p>

<p>
No integer part of the version may be longer than 18 digits.
</p>

<p>
Finally, version may have a Gentoo revision number in the form <c>-r1</c>. The initial
Gentoo version should have no revision suffix, the first revision should be
<c>-r1</c>, the second <c>-r2</c> and so on. See <uri link="::general-concepts/ebuild-revisions"/>.
Revision numbers are distinguished from patch releases by revision bumps being
changes by Gentoo developers, while patch releases are new releases by upstream (with the exception
of snapshots, see below).
</p>

<p>
Overall, this gives us a filename like <c>libfoo-1.2.5b_pre5-r2.ebuild</c>.
</p>

<p>
When packaging a snapshot of a source repository, there are two commonly used formats. The first
treats the snapshot as a patch to the previous version, and so the ebuild version is in the format
$(last-released-version)_pYYYYMMDD. Alternatively, the snapshot may be treated as a pre-release to
an upcoming version, usually used when a release is anticipated but not out yet. The format for this
is $(upcoming-version)_preYYYYMMDD.
</p>

<p>
The policy for so-called <e>live</e> ebuilds
(see <uri link="::ebuild-writing/functions/src_unpack/#src_unpack-actions"/>)
is to use <c>9999</c> as the version (or as the last version component).
</p>

<p>
The
<uri link="::eclass-reference/eapi7-ver.eclass">
eapi7-ver.eclass</uri> may be used to manipulate and extract ebuild
version components.
</p>

</body>
</section>

<section>
<title>Ebuild Header</title>
<body>

<p>
All ebuilds committed to the tree should have a two line header immediately at
the start indicating copyright, followed by an empty line. This must be an
exact copy of the contents of
<c><uri link="https://gitweb.gentoo.org/repo/gentoo.git/tree/header.txt">
header.txt</uri></c> in the top directory of the Gentoo repository.
</p>

<codesample lang="ebuild">
# Copyright 1999-2019 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2
</codesample>

<note>
The header previously included a third line with a CVS <c>&#36;Id&#36;</c>
or <c>&#36;Header&#36;</c> keyword. That line was abolished after conversion
to Git by <uri link="https://bugs.gentoo.org/611234">decision of the Gentoo
Council on 28 February 2017</uri> and <e>must not</e> be added any more.
</note>

</body>
</section>

<section>
<title>Indenting and Whitespace</title>
<body>

<p>
Indenting in ebuilds must be done with tabs, one tab per indent
level. Each tab represents four spaces. Tabs should only be used for
indenting, never inside strings.
</p>

<p>
Avoid trailing whitespace: repoman will warn you about this if your
ebuild contains trailing or leading whitespace (whitespace instead of
tabs for indentation) when you commit.
</p>

<p>
Where possible, try to keep lines no wider than 80 positions. A
'position' is generally the same as a character <d/> tabs are four
positions wide, and multibyte characters are just one position wide.
</p>

</body>
</section>

<section>
<title>Character Set</title>
<body>
<p>
All ebuilds (and eclasses, metadata files and ChangeLogs) must use the
UTF-8 character set.
See <uri link="https://www.gentoo.org/glep/glep-0031.html">GLEP 31</uri>
for details.
</p>
</body>
</section>

</chapter>
</guide>
