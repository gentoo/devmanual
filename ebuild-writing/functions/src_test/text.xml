<?xml version="1.0"?>
<guide self="ebuild-writing/functions/src_test/">
<chapter>
<title>src_test</title>

<body>
<table>
  <tr>
    <th>Function</th>
    <ti><c>src_test</c></ti>
  </tr>
  <tr>
    <th>Purpose</th>
    <ti>Run pre-install test scripts</ti>
  </tr>
  <tr>
    <th>Sandbox</th>
    <ti>Enabled</ti>
  </tr>
  <tr>
    <th>Privilege</th>
    <ti>user</ti>
  </tr>
  <tr>
    <th>Called for</th>
    <ti>ebuild</ti>
  </tr>
</table>
</body>

<section>
<title>Default <c>src_test</c></title>
<body>
<p>The default test phase in EAPI 6 is equivalent to the following:</p>
<codesample lang="ebuild">
src_test() {
	if emake check -n &amp;> /dev/null; then
		emake check
	elif emake test -n &amp;> /dev/null; then
		emake test
	fi
}
</codesample>
</body>
</section>

<section>
<title>Sample <c>src_test</c></title>
<body>
<codesample lang="ebuild">
src_test() {
    cd "${S}"/src/testdir || die

    # Test 49 won't work inside a portage environment
    sed -i -e 's~test49.out~~g' Makefile || die

    # Try to run the non-gui tests only
    # pass -j1 if tests do not support being run in parallel
    emake -j1 test-nongui
}
</codesample>
</body>
</section>

<section>
<title>Tests that require X11</title>
<body>
<p>
Some packages include tests (or other build-time applications) that
attempt to use the user's X11 session and fail being unable to connect
to it. Those tests need to be fixed to work independently of the X11
server that might or might not be running when packages are being built.
</p>

<p>
If the program in question does not strictly need X11 but merely
attempts to take opportunity of the <c>DISPLAY</c> variable being set,
the best solution is to simply unset this variable in the ebuild.
</p>

<codesample lang="ebuild">
src_test() {
	# tests attempt to connect to X11 and fail when it is set
	# however, they work just fine without X11
	unset DISPLAY

	default
}
</codesample>

<p>
If the package actually requires a running X11 server to run
the complete test suite, you can use the <c>virtualx</c> eclass to
provide an isolated Xvfb environment for the tests to use. It provides
a virtual X11 display that is not connected to any physical device
and that programs can use reliably.
</p>

<codesample lang="ebuild">
inherit virtualx

src_test() {
	virtx default
}
</codesample>
</body>
</section>

<section>
<title>Common <c>src_test</c> Tasks</title>
<body>
<p>
Often the default <c>src_test</c> is fine. Sometimes it is necessary
to remove certain tests from the list if they cannot be used with a
portage environment. Reasons for such a failure could include:
</p>

<ul>
  <li>
    Needing to work with files which are disallowed by the sandbox.
  </li>
  <li>Requiring user input (src_test must not be interactive).</li>
  <li>Requiring root privileges.</li>
</ul>

<p>
Usually, removing the relevant test from the <c>Makefile</c>
using <c>sed</c> or skipping a particular <c>make</c> target is
sufficient.
</p>

<p>
Try to ensure that tests work properly for your ebuild. A good test
suite is extremely helpful for arch maintainers.
</p>

</body>
</section>

<section>
<title>Skipping Tests</title>
<body>
<p>
Sometimes it is necessary to skip tests entirely. This can be done by
setting <c>RESTRICT="test"</c> in the ebuild.
</p>

<note>
If upstream provide a test suite which doesn't work, consider talking
to them about getting it fixed. A broken test suite requires developers
to investigate each test failure in order to determine whether it is
genuine or indicates a broken test.
</note>
</body>
</section>

</chapter>
</guide>
