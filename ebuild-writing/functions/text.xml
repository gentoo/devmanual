<?xml version="1.0"?>
<guide self="ebuild-writing/functions/">
<chapter>
<title>Ebuild Phase Functions</title>

<body>
<p>
When installing packages from source, the phase function call order is
<c>pkg_pretend</c>, <c>pkg_setup</c>,
<c>src_unpack</c>, <c>src_prepare</c>, <c>src_configure</c>, <c>src_compile</c>,
<c>src_test</c> (optional, <c>FEATURES="test"</c>),
<c>src_install</c>, <c>pkg_preinst</c>, <c>pkg_postinst</c>. When installing packages
from a binary, the phase function call order is <c>pkg_pretend</c>,
<c>pkg_setup</c>, <c>pkg_preinst</c>, <c>pkg_postinst</c>.
As some phases haven't been introduced from the beginning, you can have a look at
<uri link="::ebuild-writing/eapi"/> for an overview, what have been introduced in which EAPI.
</p>

<figure short="How the ebuild phase functions are processed" link="diagram.png"/>

<p>
The <c>pkg_pretend</c> function is to be used for performing various
early sanity checks, such as ensuring that certain kernel options are
enabled. It is important to keep in mind that <c>pkg_pretend</c> runs
separately from the rest of the phase function sequence. Consequently,
there is no environment saving or propagation to the next
phase. Moreover, ebuild dependencies are not guaranteed to be
satisfied at this phase.
</p>

<p>
The <c>pkg_prerm</c> and <c>pkg_postrm</c> functions are called when uninstalling a
package. The <c>pkg_config</c> function is used for any special package
configuration <d/> it is only run when explicitly requested by the user. The
<c>pkg_nofetch</c> function is used when a <c>RESTRICT="fetch"</c> package needs to
obtain some <c>SRC_URI</c> components.
</p>

<p>
Between the transition from <c>pkg_preinst</c> to <c>pkg_postinst</c>, files are
copied over to the live filesystem from the sandboxed temporary installation
location, and Portage records digests of the files installed.
</p>

<p>
When testing or debugging, you can instruct Portage to execute a
specific phase function of an ebuild by using the <c>ebuild</c>
command, see the <c>ebuild(1)</c> manual
page for further information.
</p>

<p>
Downloading a package's source happens before any of these phases, so
<c>emerge --fetchonly</c> should perform all the network access you
need (unless you're using live ebuilds).  Network access outside of
this would not be cached locally (e.g. in <c>${DISTDIR}</c>, see
<uri link="::ebuild-writing/variables#Predefined Read-Only Variables"/>),
which makes it hard to have reproducible builds (see
<uri link="::ebuild-writing/functions/src_unpack/vcs-sources/#Disadvantages of VCS Sources"/>).
Avoid network access in any phase by using local files, extending
<c>SRC_URI</c> (see
<uri link="::ebuild-writing/variables#Ebuild-defined Variables"/>), etc.
</p>
</body>

<section>
<title>Default phase functions</title>
<body>

<p>
The default <c>pkg_nofetch</c> and <c>src_*</c> phase functions are accessible
via a function having a name that begins with <c>default_</c> and ends with the
respective phase function name. For example, a call to a function with the name
<c>default_src_compile</c> is equivalent to a call to the default
<c>src_compile</c> implementation.
</p>

<p>
The default phase functions are:
</p>

<ul>
  <li><c>default_pkg_nofetch</c></li>
  <li><c>default_src_unpack</c></li>
  <li><c>default_src_prepare</c></li>
  <li><c>default_src_configure</c></li>
  <li><c>default_src_compile</c></li>
  <li><c>default_src_test</c></li>
  <li><c>default_src_install</c></li>
</ul>

<p>
A function named <c>default</c> is redefined for each of the above phases,
so that it will call the <c>default_*</c> function corresponding to
the current phase. For example, a call to the <c>default</c> function
during the <c>src_compile</c> phase is equivalent to a call to the
<c>default_src_compile</c> function.
</p>

</body>
</section>

<section>
<title>Contents</title>
<body>
<contentsTree/>
</body>
</section>
</chapter>

<include href="pkg_pretend/"/>
<include href="pkg_nofetch/"/>
<include href="pkg_setup/"/>
<include href="src_unpack/"/>
<include href="src_prepare/"/>
<include href="src_configure/"/>
<include href="src_compile/"/>
<include href="src_test/"/>
<include href="src_install/"/>
<include href="pkg_preinst/"/>
<include href="pkg_postinst/"/>
<include href="pkg_prerm/"/>
<include href="pkg_postrm/"/>
<include href="pkg_config/"/>
<include href="pkg_info/"/>
</guide>
