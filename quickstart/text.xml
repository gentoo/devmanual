<?xml version="1.0"?>
<guide self="quickstart/">
<chapter>
<title>Quickstart Ebuild Guide</title>

<body>
<p>
This page provides a <e>very</e> brief introduction to ebuild
writing. It does not attempt to cover many of the details or problems
that will be encountered by developers <d/> rather, it gives some
trivial examples which may be of use when trying to grasp the basic
idea of how ebuilds work.
</p>

<p>
For proper coverage of all the ins and outs, see <uri link="::ebuild-writing"/>.
The <uri link="::general-concepts"/> chapter will also be of use.
</p>

<p>
Note that the examples used here, whilst based upon real tree ebuilds,
have had several parts chopped out, changed and simplified.
</p>
</body>

<section>
<title>First Ebuild</title>

<body>
<p>
We'll start with an ebuild for the <e>Exuberant Ctags</e> utility, a source code
indexing tool. Here's a simplified <c>dev-util/ctags/ctags-5.5.4.ebuild</c> (you
can see real ebuilds in the main tree).
</p>

<codesample lang="ebuild">
# Copyright 1999-2016 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# &#36;Id&#36;

EAPI=6

DESCRIPTION="Exuberant ctags generates tags files for quick source navigation"
HOMEPAGE="http://ctags.sourceforge.net"
SRC_URI="mirror://sourceforge/ctags/${P}.tar.gz"

LICENSE="GPL-2"
SLOT="0"
KEYWORDS="~mips ~sparc ~x86"

src_configure() {
    econf --with-posix-regex
}

src_install() {
    emake DESTDIR="${D}" install

    dodoc FAQ NEWS README
}
</codesample>
</body>

<subsection>
<title>Basic Format</title>

<body>
<p>
As you can see, ebuilds are just <c>bash</c> scripts that are executed within a
special environment.
</p>

<p>
At the top of the ebuild is a header block. This is present in all ebuilds.
</p>

<p>
Ebuilds are indented using tabs, with each tab representing four places. See
<uri link="::ebuild-writing/file-format"/>.
</p>
</body>
</subsection>

<subsection>
<title>Information Variables</title>

<body>
<p>
Next, there are a series of variables. These tell Portage various things about
the ebuild and package in question.
</p>

<p>
The <c>EAPI</c> of the ebuild, see <uri link="::ebuild-writing/eapi"/>.
</p>

<p>
The <c>DESCRIPTION</c> variable is set to a <e>short</e> description
of the package and its purpose.
</p>

<p>
The <c>HOMEPAGE</c> is a link to the package's homepage (remember to
include the <c>http://</c> part).
</p>

<p>
The <c>SRC_URI</c> tells Portage the address to use for downloading
the source tarball. Here, <c>mirror://sourceforge/</c> is a special
notation meaning &quot;any of the Sourceforge mirrors&quot;.
<c>${P}</c> is a read-only variable set by Portage which is the package's
name and version <d/> in this case, it would be <c>ctags-5.5.4</c>.
</p>

<p>
The <c>LICENSE</c> is <c>GPL-2</c> (the GNU General Public License version 2).
</p>

<p>
The <c>SLOT</c> variable tells Portage which slot this package installs to. If
you've not seen slots before, either just use <c>&quot;0&quot;</c> or read
<uri link="::general-concepts/slotting"/>.
</p>

<p>
The <c>KEYWORDS</c> variable is set to archs upon which this ebuild has been
tested. We use <c>~</c> keywords for newly written ebuilds <d/> packages are not
committed straight to stable, even if they seem to work. See <uri link="::keywording"/> for
details.
</p>
</body>
</subsection>

<subsection>
<title>Build Functions</title>

<body>
<p>
Next, a function named <c>src_configure</c>. Portage will call this
function when it wants to <e>configure</e> the package. The <c>econf</c>
function is a wrapper for calling <c>./configure</c>. If for some reason
an error occurs in <c>econf</c>, Portage will stop rather than trying to
continue with the install.
</p>

<p>
The <c>src_install</c> function is called by Portage when it wants
to <e>install</e> the package. A slight subtlety here <d/> rather than
installing straight to the live filesystem, we must install to a
special location which is given by the <c>${D}</c> variable (Portage sets
this <d/> see <uri link="::general-concepts/install-destinations"/> and
<uri link="::general-concepts/sandbox"/>).
</p>

<note>
The canonical install method is <c>emake DESTDIR=&quot;${D}&quot;
install</c>. This will work with any properly written standard
<c>Makefile</c>. If this gives sandbox errors, try <c>einstall</c>
instead. If this still fails, see <uri
link="::ebuild-writing/functions/src_install/"/> for how to do manual
installs.
</note>

<p>
The <c>dodoc</c> is a helper function for installing
files into the relevant part of <c>/usr/share/doc</c>.
</p>

<p>
Ebuilds can define other functions (see <uri link="::ebuild-writing/functions"/>).
In all cases, Portage provides a reasonable default implementation which
quite often does the 'right thing'. There was no need to define
<c>src_unpack</c> and <c>src_compile</c> functions here, for example
<d/> the <c>src_unpack</c> function is used to do any unpacking of
tarballs or patching of source files, but the default implementation
does everything we need in this case.
Similarly, the default <c>src_compile</c> function will call
<c>emake</c> which is a wrapper for <c>make</c>.
</p>

<note>
Formerly, the <c>|| die</c> construct had to be used after every command
to check for errors. This is no longer necessary in EAPI 4 <d/>
functions provided by Portage will die by themselves if something
failed.
</note>
</body>
</subsection>

</section>

<section>
<title>Ebuild with Dependencies</title>

<body>
<p>
In the ctags example, we didn't tell Portage about any dependencies. As it
happens, that's ok, because ctags only needs a basic toolchain to compile and
run (see <uri link="::general-concepts/dependencies#Implicit System Dependency"/>
for why we don't need to depend upon those explicitly). However, life is rarely
that simple.
</p>

<p>
Here's <c>app-misc/detox/detox-1.1.1.ebuild</c>:
</p>

<codesample lang="ebuild">
# Copyright 1999-2016 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# &#36;Id&#36;

EAPI=5

DESCRIPTION="detox safely removes spaces and strange characters from filenames"
HOMEPAGE="http://detox.sourceforge.net/"
SRC_URI="mirror://sourceforge/${PN}/${P}.tar.bz2"

LICENSE="BSD"
SLOT="0"
KEYWORDS="~hppa ~mips sparc x86"

RDEPEND="dev-libs/popt"
DEPEND="${RDEPEND}
    sys-devel/flex
    sys-devel/bison"

src_configure() {
    econf --with-popt
}

src_install() {
    emake DESTDIR="${D}" install
    dodoc README CHANGES
}
</codesample>

<p>
Again, you can see the ebuild header and the various informational variables. In
<c>SRC_URI</c>, <c>${PN}</c> is used to get the package's
name <e>without</e> the version suffix (there are more of these
variables <d/> see
<uri link="::ebuild-writing/variables#Predefined Read-Only Variables"/>).
</p>

<p>
Again, we define <c>src_configure</c> and <c>src_install</c> functions.
</p>

<p>
The <c>DEPEND</c> and <c>RDEPEND</c> variables are how Portage determines which
packages are needed to build and run the package. The <c>DEPEND</c> variable lists
compile-time dependencies, and the <c>RDEPEND</c> lists runtime dependencies. See
<uri link="::general-concepts/dependencies"/> for some more complex examples.
</p>

</body>
</section>

<section>
<title>Ebuild with Patches</title>

<body>
<p>
Often we need to apply patches. This is done in the <c>src_prepare</c>
function using the <c>epatch</c> helper function. To use <c>epatch</c>
one must first tell Portage that the <c>eutils</c> eclass (an eclass is
like a library) is required <d/>
this is done via <c>inherit eutils</c> at the top of the ebuild. Here's
<c>app-misc/detox/detox-1.1.0.ebuild</c>:
</p>

<codesample lang="ebuild">
# Copyright 1999-2016 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# &#36;Id&#36;

EAPI=5

inherit eutils

DESCRIPTION="detox safely removes spaces and strange characters from filenames"
HOMEPAGE="http://detox.sourceforge.net/"
SRC_URI="mirror://sourceforge/${PN}/${P}.tar.bz2"

LICENSE="BSD"
SLOT="0"
KEYWORDS="~hppa ~mips ~sparc ~x86"

RDEPEND="dev-libs/popt"
DEPEND="${RDEPEND}
    sys-devel/flex
    sys-devel/bison"

src_prepare() {
    epatch "${FILESDIR}"/${P}-destdir.patch \
        "${FILESDIR}"/${P}-parallel_build.patch
}

src_configure() {
    econf --with-popt
}

src_install() {
    emake DESTDIR="${D}" install
    dodoc README CHANGES
}
</codesample>

<p>
Note the <c>${FILESDIR}/${P}-destdir.patch</c> <d/> this refers to
<c>detox-1.1.0-destdir.patch</c>, which lives in the <c>files/</c>
subdirectory in the Gentoo repository. Larger patch files must go on your
developer's space at <c>dev.gentoo.org</c> rather than in <c>files/</c> or
mirrors <d/> see <uri link="::general-concepts/mirrors#Gentoo Mirrors"/> and <uri
link="::ebuild-writing/functions/src_prepare/epatch/"/>.
</p>

</body>
</section>

<section>
<title>Ebuild with USE Flags</title>

<body>
<p>
Now for some <c>USE</c> flags. Here's <c>dev-libs/libiconv/libiconv-1.9.2.ebuild</c>, a
replacement iconv for <c>libc</c> implementations which don't have their own.
</p>

<codesample lang="ebuild">
# Copyright 1999-2016 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# &#36;Id&#36;

EAPI=5

DESCRIPTION="GNU charset conversion library for libc which doesn't implement it"
HOMEPAGE="http://www.gnu.org/software/libiconv/"
SRC_URI="ftp://ftp.gnu.org/pub/gnu/libiconv/${P}.tar.gz"

LICENSE="LGPL-2.1"
SLOT="0"
KEYWORDS="~amd64 ~ppc ~sparc ~x86"
IUSE="nls"

DEPEND="!sys-libs/glibc"

src_configure() {
    econf $(use_enable nls)
}

src_install() {
    emake DESTDIR="${D}" install
}
</codesample>

<p>
Note the <c>IUSE</c> variable. This lists all (non-special) use flags that are used
by the ebuild. This is used for the <c>emerge -pv</c> output, amongst other things.
</p>

<p>
The package's <c>./configure</c> script takes the usual <c>--enable-nls</c> or
<c>--disable-nls</c> argument. We use the <c>use_enable</c> utility function to
generate this automatically, depending on the user's <c>USE</c> flags (see
<uri link="::function-reference/query-functions/"/>).
</p>

<p>
Another more complicated example, this time based upon
<c>mail-client/sylpheed/sylpheed-1.0.4.ebuild</c>:
</p>

<codesample lang="ebuild">
# Copyright 1999-2016 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# &#36;Id&#36;

EAPI=5

inherit eutils

DESCRIPTION="A lightweight email client and newsreader"
HOMEPAGE="http://sylpheed.good-day.net/"
SRC_URI="mirror://sourceforge/${PN}/${P}.tar.bz2"

LICENSE="GPL-2"
SLOT="0"
KEYWORDS="alpha amd64 hppa ia64 ppc ppc64 sparc x86"
IUSE="crypt imlib ipv6 ldap nls pda ssl xface"

RDEPEND="=x11-libs/gtk+-2*
    crypt? ( >=app-crypt/gpgme-0.4.5 )
    imlib? ( media-libs/imlib2 )
    ldap? ( >=net-nds/openldap-2.0.11 )
    pda? ( app-pda/jpilot )
    ssl? ( dev-libs/openssl )
    xface? ( >=media-libs/compface-1.4 )
    app-misc/mime-types
    x11-misc/shared-mime-info"
DEPEND="${RDEPEND}
    dev-util/pkgconfig
    nls? ( >=sys-devel/gettext-0.12.1 )"

src_prepare() {
    epatch "${FILESDIR}"/${PN}-namespace.diff \
        "${FILESDIR}"/${PN}-procmime.diff
}

src_configure() {
    econf \
        $(use_enable nls) \
        $(use_enable ssl) \
        $(use_enable crypt gpgme) \
        $(use_enable pda jpilot) \
        $(use_enable ldap) \
        $(use_enable ipv6) \
        $(use_enable imlib) \
        $(use_enable xface compface)
}

src_install() {
    emake DESTDIR="${D}" install

    doicon sylpheed.png
    domenu sylpheed.desktop

    dodoc [A-Z][A-Z]* ChangeLog*
}
</codesample>

<p>
Note the optional dependencies. Some of the <c>use_enable</c> lines use the
two-argument version <d/> this is helpful when the USE flag name does not exactly
match the <c>./configure</c> argument.
</p>
</body>
</section>

</chapter>
</guide>
